{"ast":null,"code":"import { isFunction, isNode, isString } from './type';\n/**\n * querySelector under steroid\n * Can use as selector:\n *  - function\n *  - DOM Node\n *  - String\n * @param {String|Node|Function} selector \n * @param {Node|undefined} node \n */\n\nexport const querySelector = (selector, node) => {\n  if (isFunction(selector)) {\n    return selector(node);\n  }\n\n  if (isNode(selector)) {\n    return selector;\n  }\n\n  if (isString(selector)) {\n    if (!node || !isNode(node) || node.nodeType !== 1) {\n      node = document;\n    }\n\n    return node.querySelector(selector);\n  }\n\n  if (Array.isArray(selector) || typeof NodeList !== 'undefined' && NodeList.prototype.isPrototypeOf(selector)) {\n    return selector[0];\n  }\n};\n/** \n * querySelectorAll under steroid\n * Can use as selector:\n *  - function\n *  - DOM Node\n *  - String\n * @param {String|Node|Function} selector \n * @param {Node|undefined} node \n */\n\nexport const querySelectorAll = (selector, node) => {\n  if (isFunction(selector)) {\n    return selector(node);\n  }\n\n  if (isNode(selector)) {\n    return [selector];\n  }\n\n  if (isString(selector)) {\n    if (!node || !isNode(node) || node.nodeType !== 1) {\n      node = document;\n    }\n\n    return node.querySelectorAll(selector);\n  }\n\n  if (typeof NodeList !== 'undefined' && NodeList.prototype.isPrototypeOf(selector)) {\n    return selector;\n  } else {\n    return [];\n  }\n}; // Convert dataset into Object\n\nexport const optionsFromDataset = function (node) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (isNode(node)) {\n    return node.dataset ? Object.keys(node.dataset).filter(key => Object.keys(defaultOptions).includes(key)).reduce((obj, key) => {\n      return { ...obj,\n        [key]: node.dataset[key]\n      };\n    }, {}) : {};\n  } else {\n    return {};\n  }\n};\n/**\n * Copy HTML attributes from a source element to a target element\n * @param {Node} target \n * @param {Node} source \n * @param {String} except list of attributes to skip (separated by space)\n */\n\nexport const cloneAttributes = function (target, source) {\n  let except = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (except !== null) {\n    except = except.split(' ');\n  }\n\n  [...source.attributes].forEach(attr => {\n    if (!except.includes(attr.nodeName)) {\n      target.setAttribute(attr.nodeName === \"id\" ? 'data-id' : attr.nodeName, attr.nodeValue);\n    }\n  });\n};\n/**\n * Escapes string for insertion into HTML, replacing special characters with HTML\n * entities.\n * @param {String} string\n */\n\nexport const escape = string => {\n  return isString(string) ? string.replace(/(['\"<>])/g, char => {\n    return {\n      '<': \"&lt;\",\n      '>': \"&gt;\",\n      '\"': \"&quot;\",\n      \"'\": \"&#39;\"\n    }[char];\n  }) : string;\n};","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/node_modules/@creativebulma/bulma-tagsinput/src/js/utils/dom.js"],"names":["isFunction","isNode","isString","querySelector","selector","node","nodeType","document","Array","isArray","NodeList","prototype","isPrototypeOf","querySelectorAll","optionsFromDataset","defaultOptions","dataset","Object","keys","filter","key","includes","reduce","obj","cloneAttributes","target","source","except","split","attributes","forEach","attr","nodeName","setAttribute","nodeValue","escape","string","replace","char"],"mappings":"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","sourcesContent":["import { isFunction, isNode, isString } from './type';\n\n/**\n * querySelector under steroid\n * Can use as selector:\n *  - function\n *  - DOM Node\n *  - String\n * @param {String|Node|Function} selector \n * @param {Node|undefined} node \n */\nexport const querySelector = (selector, node) => {\n\tif (isFunction(selector)) {\n\t\treturn selector(node);\n\t}\n\n\tif (isNode(selector)) {\n\t\treturn selector;\n\t}\n\n\tif (isString(selector)) {\n\t\tif (!node || !isNode(node) || node.nodeType !== 1) {\n\t\t\tnode = document;\n\t\t}\n\t\t\n\t\treturn node.querySelector(selector);\n\t}\n\n\tif (Array.isArray(selector) || (typeof NodeList !== 'undefined' && NodeList.prototype.isPrototypeOf(selector))) {\n\t\treturn selector[0];\n\t}\n}\n\n/** \n * querySelectorAll under steroid\n * Can use as selector:\n *  - function\n *  - DOM Node\n *  - String\n * @param {String|Node|Function} selector \n * @param {Node|undefined} node \n */\nexport const querySelectorAll = (selector, node) => {\n\tif (isFunction(selector)) {\n\t\treturn selector(node);\n\t}\n\t\n\tif (isNode(selector)) {\n\t\treturn [selector];\n\t}\n\n\tif (isString(selector)) {\n\t\tif (!node || !isNode(node) || node.nodeType !== 1) {\n\t\t\tnode = document;\n\t\t}\n\t\t\n\t\treturn node.querySelectorAll(selector);\n\t}\n\t\n\tif (typeof NodeList !== 'undefined' && NodeList.prototype.isPrototypeOf(selector)) {\n\t\treturn selector;\n\t} else {\n\t\treturn [];\n\t}\n};\n\n// Convert dataset into Object\nexport const optionsFromDataset = (node, defaultOptions = {}) => {\n\tif (isNode(node)) {\n\t\treturn node.dataset ? Object.keys(node.dataset)\n\t\t\t.filter(key => Object.keys(defaultOptions).includes(key))\n\t\t\t.reduce((obj, key) => {\n\t\t\t\treturn {\n\t\t\t\t\t...obj,\n\t\t\t\t\t[key]: node.dataset[key]\n\t\t\t\t};\n\t\t\t}, {}) : {};\n\t} else {\n\t\treturn {};\n\t}\n};\n\n/**\n * Copy HTML attributes from a source element to a target element\n * @param {Node} target \n * @param {Node} source \n * @param {String} except list of attributes to skip (separated by space)\n */\nexport const cloneAttributes = (target, source, except = null) => {\n\tif (except !== null) {\n\t\texcept = except.split(' ');\n\t}\n\n\t[...source.attributes].forEach(attr => {\n\t\tif (!except.includes(attr.nodeName)) {\n\t\t\ttarget.setAttribute(attr.nodeName === \"id\" ? 'data-id' : attr.nodeName, attr.nodeValue);\n\t\t}\n\t});\n};\n\n/**\n * Escapes string for insertion into HTML, replacing special characters with HTML\n * entities.\n * @param {String} string\n */\nexport const escape = (string) => {\n\treturn isString(string) ?\n\t\tstring.replace(/(['\"<>])/g, (char) => {\n\t\t\treturn {\n\t\t\t\t'<': \"&lt;\",\n\t\t\t\t'>': \"&gt;\",\n\t\t\t\t'\"': \"&quot;\",\n\t\t\t\t\"'\": \"&#39;\"\n\t\t\t}[char];\n\t\t})\n\t: string;\n};\n"]},"metadata":{},"sourceType":"module"}