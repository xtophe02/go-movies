{"ast":null,"code":"export const isFunction = unknown => typeof unknown === 'function';\nexport const isString = unknown => typeof unknown === 'string' || !!unknown && typeof unknown === 'object' && Object.prototype.toString.call(unknown) === '[object String]';\nexport const isObject = unknown => (typeof unknown === 'function' || typeof unknown === 'object' && !!unknown) && !Array.isArray(unknown); // Returns true if the value has a \"then\" function. Adapted from\n// https://github.com/graphql/graphql-js/blob/499a75939f70c4863d44149371d6a99d57ff7c35/src/jsutils/isPromise.js\n\nexport const isPromise = value => Boolean(value && typeof value.then === 'function');\nexport const isNode = unknown => {\n  try {\n    Node.prototype.cloneNode.call(unknown, false);\n    return true;\n  } catch (err) {\n    return false;\n  }\n};\n/**\n * Convert String (false,False,True,true,no,yes,0,1) to real Boolean\n * @param {String} val \n */\n\nexport const BooleanParse = function (val) {\n  const falsy = /^(?:f(?:alse)?|no?|0+)$/i;\n  return !falsy.test(val) && !!val;\n};\n/**\n * Check if given query selector is valid\n * @param {String} selector \n */\n\nexport const isSelectorValid = selector => {\n  const queryCheck = s => document.createDocumentFragment().querySelector(s);\n\n  try {\n    queryCheck(selector);\n  } catch {\n    return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/node_modules/@creativebulma/bulma-tagsinput/src/js/utils/type.js"],"names":["isFunction","unknown","isString","Object","prototype","toString","call","isObject","Array","isArray","isPromise","value","Boolean","then","isNode","Node","cloneNode","err","BooleanParse","val","falsy","test","isSelectorValid","selector","queryCheck","s","document","createDocumentFragment","querySelector"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAGC,OAAO,IAAI,OAAOA,OAAP,KAAmB,UAAjD;AACP,OAAO,MAAMC,QAAQ,GAAGD,OAAO,IAAK,OAAOA,OAAP,KAAmB,QAAnB,IAAiC,CAAC,CAACA,OAAF,IAAa,OAAOA,OAAP,KAAmB,QAAjC,IAA8CE,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BL,OAA/B,MAA4C,iBAAvJ;AACP,OAAO,MAAMM,QAAQ,GAAGN,OAAO,IAAK,CAAC,OAAOA,OAAP,KAAmB,UAAnB,IAAkC,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAAC,CAACA,OAApE,KAAiF,CAACO,KAAK,CAACC,OAAN,CAAcR,OAAd,CAA/G,C,CACP;AACA;;AACA,OAAO,MAAMS,SAAS,GAAGC,KAAK,IAAIC,OAAO,CAACD,KAAK,IAAI,OAAOA,KAAK,CAACE,IAAb,KAAsB,UAAhC,CAAlC;AAEP,OAAO,MAAMC,MAAM,GAAGb,OAAO,IAAI;AAChC,MAAI;AACHc,IAAAA,IAAI,CAACX,SAAL,CAAeY,SAAf,CAAyBV,IAAzB,CAA8BL,OAA9B,EAAuC,KAAvC;AACA,WAAO,IAAP;AACA,GAHD,CAGE,OAAOgB,GAAP,EAAY;AACb,WAAO,KAAP;AACA;AACD,CAPM;AASP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,UAAUC,GAAV,EAAe;AAC1C,QAAMC,KAAK,GAAG,0BAAd;AAEA,SAAO,CAACA,KAAK,CAACC,IAAN,CAAWF,GAAX,CAAD,IAAoB,CAAC,CAACA,GAA7B;AACA,CAJM;AAMP;AACA;AACA;AACA;;AACA,OAAO,MAAMG,eAAe,GAAGC,QAAQ,IAAI;AAC1C,QAAMC,UAAU,GAAGC,CAAC,IAAIC,QAAQ,CAACC,sBAAT,GAAkCC,aAAlC,CAAgDH,CAAhD,CAAxB;;AACA,MAAI;AACHD,IAAAA,UAAU,CAACD,QAAD,CAAV;AACA,GAFD,CAEE,MAAM;AACP,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA,CATM","sourcesContent":["export const isFunction = unknown => typeof unknown === 'function';\nexport const isString = unknown => (typeof unknown === 'string' || ((!!unknown && typeof unknown === 'object') && Object.prototype.toString.call(unknown) === '[object String]'));\nexport const isObject = unknown => ((typeof unknown === 'function' || (typeof unknown === 'object' && !!unknown)) && !Array.isArray(unknown));\n// Returns true if the value has a \"then\" function. Adapted from\n// https://github.com/graphql/graphql-js/blob/499a75939f70c4863d44149371d6a99d57ff7c35/src/jsutils/isPromise.js\nexport const isPromise = value => Boolean(value && typeof value.then === 'function');\n\nexport const isNode = unknown => {\n\ttry {\n\t\tNode.prototype.cloneNode.call(unknown, false);\n\t\treturn true;\n\t} catch (err) {\n\t\treturn false;\n\t}\n};\n\n/**\n * Convert String (false,False,True,true,no,yes,0,1) to real Boolean\n * @param {String} val \n */\nexport const BooleanParse = function (val) {\n\tconst falsy = /^(?:f(?:alse)?|no?|0+)$/i;\n\t\n\treturn !falsy.test(val) && !!val;\n};\n\n/**\n * Check if given query selector is valid\n * @param {String} selector \n */\nexport const isSelectorValid = selector => {\n\tconst queryCheck = s => document.createDocumentFragment().querySelector(s)\n\ttry {\n\t\tqueryCheck(selector);\n\t} catch {\n\t\treturn false;\n\t}\n\t\n\treturn true;\n}"]},"metadata":{},"sourceType":"module"}