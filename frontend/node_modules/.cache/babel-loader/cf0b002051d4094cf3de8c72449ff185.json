{"ast":null,"code":"var _jsxFileName = \"/home/chrismo/Documents/PROJECTS/go-movies/frontend/src/routes/genre.js\",\n    _s = $RefreshSig$();\n\nimport { Link, useParams, useLocation } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst fetchMoviesByGenreID = async id => {\n  try {\n    const res = await fetch(`http://localhost:4000/v1/movies/${id}`);\n\n    if (!res.ok) {\n      console.log(res);\n      throw new Error(res.statusText);\n    }\n\n    return res.json();\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport default function Genre() {\n  _s();\n\n  let params = useParams();\n  let location = useLocation();\n  const genreName = location.search.split(\"=\")[1];\n  const [state, setState] = useState({\n    loading: true,\n    movies: [],\n    error: null\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetchMoviesByGenreID(params.id);\n\n      if (!res.movies) {\n        setState(prev => ({ ...prev,\n          loading: false,\n          error: res\n        }));\n      } else {\n        setState(prev => ({ ...prev,\n          loading: false,\n          movies: res.movies\n        }));\n      }\n    };\n\n    fetchData();\n  }, [params.id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"title is-3\",\n      children: genreName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), state.movies.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: state.movies.map(mv => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/movies/${mv.id}`,\n          children: mv.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }, this)\n      }, mv.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No movies of this genre\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Genre, \"MGDemDMp7waT+tohX87hQUYQAT8=\", false, function () {\n  return [useParams, useLocation];\n});\n\n_c = Genre;\n\nvar _c;\n\n$RefreshReg$(_c, \"Genre\");","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/src/routes/genre.js"],"names":["Link","useParams","useLocation","useState","useEffect","fetchMoviesByGenreID","id","res","fetch","ok","console","log","Error","statusText","json","error","message","Genre","params","location","genreName","search","split","state","setState","loading","movies","fetchData","prev","length","map","mv","title"],"mappings":";;;AAAA,SAASA,IAAT,EAAeC,SAAf,EAA0BC,WAA1B,QAA6C,kBAA7C;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;;AAEA,MAAMC,oBAAoB,GAAG,MAAOC,EAAP,IAAc;AACzC,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,mCAAkCF,EAAG,EAAvC,CAAvB;;AACA,QAAI,CAACC,GAAG,CAACE,EAAT,EAAa;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACA,YAAM,IAAIK,KAAJ,CAAUL,GAAG,CAACM,UAAd,CAAN;AACD;;AACD,WAAON,GAAG,CAACO,IAAJ,EAAP;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACd,WAAOA,KAAK,CAACC,OAAb;AACD;AACF,CAXD;;AAYA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,MAAIC,MAAM,GAAGjB,SAAS,EAAtB;AACA,MAAIkB,QAAQ,GAAGjB,WAAW,EAA1B;AACA,QAAMkB,SAAS,GAAGD,QAAQ,CAACE,MAAT,CAAgBC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAlB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC;AACjCsB,IAAAA,OAAO,EAAE,IADwB;AAEjCC,IAAAA,MAAM,EAAE,EAFyB;AAGjCX,IAAAA,KAAK,EAAE;AAH0B,GAAD,CAAlC;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuB,SAAS,GAAG,YAAY;AAC5B,YAAMpB,GAAG,GAAG,MAAMF,oBAAoB,CAACa,MAAM,CAACZ,EAAR,CAAtC;;AACA,UAAI,CAACC,GAAG,CAACmB,MAAT,EAAiB;AACfF,QAAAA,QAAQ,CAAEI,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWH,UAAAA,OAAO,EAAE,KAApB;AAA2BV,UAAAA,KAAK,EAAER;AAAlC,SAAX,CAAD,CAAR;AACD,OAFD,MAEO;AACLiB,QAAAA,QAAQ,CAAEI,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWH,UAAAA,OAAO,EAAE,KAApB;AAA2BC,UAAAA,MAAM,EAAEnB,GAAG,CAACmB;AAAvC,SAAX,CAAD,CAAR;AACD;AACF,KAPD;;AAQAC,IAAAA,SAAS;AACV,GAVQ,EAUN,CAACT,MAAM,CAACZ,EAAR,CAVM,CAAT;AAYA,sBACE;AAAA,eACG,GADH,eAEE;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,gBAA4Bc;AAA5B;AAAA;AAAA;AAAA;AAAA,YAFF,EAGGG,KAAK,CAACG,MAAN,CAAaG,MAAb,GAAsB,CAAtB,gBACC;AAAA,gBACGN,KAAK,CAACG,MAAN,CAAaI,GAAb,CAAkBC,EAAD,iBAChB;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,WAAUA,EAAE,CAACzB,EAAG,EAA3B;AAAA,oBAA+ByB,EAAE,CAACC;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF,SAASD,EAAE,CAACzB,EAAZ;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADD,gBASC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAZJ;AAAA,kBADF;AAiBD;;GAtCuBW,K;UACThB,S,EACEC,W;;;KAFOe,K","sourcesContent":["import { Link, useParams, useLocation } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\n\nconst fetchMoviesByGenreID = async (id) => {\n  try {\n    const res = await fetch(`http://localhost:4000/v1/movies/${id}`);\n    if (!res.ok) {\n      console.log(res);\n      throw new Error(res.statusText);\n    }\n    return res.json();\n  } catch (error) {\n    return error.message;\n  }\n};\nexport default function Genre() {\n  let params = useParams();\n  let location = useLocation();\n  const genreName = location.search.split(\"=\")[1];\n  const [state, setState] = useState({\n    loading: true,\n    movies: [],\n    error: null,\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetchMoviesByGenreID(params.id);\n      if (!res.movies) {\n        setState((prev) => ({ ...prev, loading: false, error: res }));\n      } else {\n        setState((prev) => ({ ...prev, loading: false, movies: res.movies }));\n      }\n    };\n    fetchData();\n  }, [params.id]);\n\n  return (\n    <>\n      {\" \"}\n      <h3 className=\"title is-3\">{genreName}</h3>\n      {state.movies.length > 0 ? (\n        <ul>\n          {state.movies.map((mv) => (\n            <li key={mv.id}>\n              <Link to={`/movies/${mv.id}`}>{mv.title}</Link>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No movies of this genre</p>\n      )}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}