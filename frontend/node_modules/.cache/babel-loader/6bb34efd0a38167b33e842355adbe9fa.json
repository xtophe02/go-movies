{"ast":null,"code":"export function stripTime(timeValue) {\n  return new Date(timeValue).setHours(0, 0, 0, 0);\n}\nexport function today() {\n  return new Date().setHours(0, 0, 0, 0);\n} // Get the time value of the start of given date or year, month and day\n\nexport function dateValue() {\n  switch (arguments.length) {\n    case 0:\n      return today();\n\n    case 1:\n      return stripTime(arguments.length <= 0 ? undefined : arguments[0]);\n  } // use setFullYear() to keep 2-digit year from being mapped to 1900-1999\n\n\n  const newDate = new Date(0);\n  newDate.setFullYear(...arguments);\n  return newDate.setHours(0, 0, 0, 0);\n}\nexport function addDays(date, amount) {\n  const newDate = new Date(date);\n  return newDate.setDate(newDate.getDate() + amount);\n}\nexport function addWeeks(date, amount) {\n  return addDays(date, amount * 7);\n}\nexport function addMonths(date, amount) {\n  // If the day of the date is not in the new month, the last day of the new\n  // month will be returned. e.g. Jan 31 + 1 month → Feb 28 (not Mar 03)\n  const newDate = new Date(date);\n  const monthsToSet = newDate.getMonth() + amount;\n  let expectedMonth = monthsToSet % 12;\n\n  if (expectedMonth < 0) {\n    expectedMonth += 12;\n  }\n\n  const time = newDate.setMonth(monthsToSet);\n  return newDate.getMonth() !== expectedMonth ? newDate.setDate(0) : time;\n}\nexport function addYears(date, amount) {\n  // If the date is Feb 29 and the new year is not a leap year, Feb 28 of the\n  // new year will be returned.\n  const newDate = new Date(date);\n  const expectedMonth = newDate.getMonth();\n  const time = newDate.setFullYear(newDate.getFullYear() + amount);\n  return expectedMonth === 1 && newDate.getMonth() === 2 ? newDate.setDate(0) : time;\n} // Calculate the distance bettwen 2 days of the week\n\nfunction dayDiff(day, from) {\n  return (day - from + 7) % 7;\n} // Get the date of the specified day of the week of given base date\n\n\nexport function dayOfTheWeekOf(baseDate, dayOfWeek) {\n  let weekStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  const baseDay = new Date(baseDate).getDay();\n  return addDays(baseDate, dayDiff(dayOfWeek, weekStart) - dayDiff(baseDay, weekStart));\n} // Get the ISO week of a date\n\nexport function getWeek(date) {\n  // start of ISO week is Monday\n  const thuOfTheWeek = dayOfTheWeekOf(date, 4, 1); // 1st week == the week where the 4th of January is in\n\n  const firstThu = dayOfTheWeekOf(new Date(thuOfTheWeek).setMonth(0, 4), 4, 1);\n  return Math.round((thuOfTheWeek - firstThu) / 604800000) + 1;\n} // Get the start year of the period of years that includes given date\n// years: length of the year period\n\nexport function startOfYearPeriod(date, years) {\n  /* @see https://en.wikipedia.org/wiki/Year_zero#ISO_8601 */\n  const year = new Date(date).getFullYear();\n  return Math.floor(year / years) * years;\n} // Convert date to the first/last date of the month/year of the date\n\nexport function regularizeDate(date, timeSpan, useLastDate) {\n  if (timeSpan !== 1 && timeSpan !== 2) {\n    return date;\n  }\n\n  const newDate = new Date(date);\n\n  if (timeSpan === 1) {\n    useLastDate ? newDate.setMonth(newDate.getMonth() + 1, 0) : newDate.setDate(1);\n  } else {\n    useLastDate ? newDate.setFullYear(newDate.getFullYear() + 1, 0, 0) : newDate.setMonth(0, 1);\n  }\n\n  return newDate.setHours(0, 0, 0, 0);\n}","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/node_modules/vanillajs-datepicker/js/lib/date.js"],"names":["stripTime","timeValue","Date","setHours","today","dateValue","length","newDate","setFullYear","addDays","date","amount","setDate","getDate","addWeeks","addMonths","monthsToSet","getMonth","expectedMonth","time","setMonth","addYears","getFullYear","dayDiff","day","from","dayOfTheWeekOf","baseDate","dayOfWeek","weekStart","baseDay","getDay","getWeek","thuOfTheWeek","firstThu","Math","round","startOfYearPeriod","years","year","floor","regularizeDate","timeSpan","useLastDate"],"mappings":"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","sourcesContent":["export function stripTime(timeValue) {\n  return new Date(timeValue).setHours(0, 0, 0, 0);\n}\n\nexport function today() {\n  return new Date().setHours(0, 0, 0, 0);\n}\n\n// Get the time value of the start of given date or year, month and day\nexport function dateValue(...args) {\n  switch (args.length) {\n    case 0:\n      return today();\n    case 1:\n      return stripTime(args[0]);\n  }\n\n  // use setFullYear() to keep 2-digit year from being mapped to 1900-1999\n  const newDate = new Date(0);\n  newDate.setFullYear(...args);\n  return newDate.setHours(0, 0, 0, 0);\n}\n\nexport function addDays(date, amount) {\n  const newDate = new Date(date);\n  return newDate.setDate(newDate.getDate() + amount);\n}\n\nexport function addWeeks(date, amount) {\n  return addDays(date, amount * 7);\n}\n\nexport function addMonths(date, amount) {\n  // If the day of the date is not in the new month, the last day of the new\n  // month will be returned. e.g. Jan 31 + 1 month → Feb 28 (not Mar 03)\n  const newDate = new Date(date);\n  const monthsToSet = newDate.getMonth() + amount;\n  let expectedMonth = monthsToSet % 12;\n  if (expectedMonth < 0) {\n    expectedMonth += 12;\n  }\n\n  const time = newDate.setMonth(monthsToSet);\n  return newDate.getMonth() !== expectedMonth ? newDate.setDate(0) : time;\n}\n\nexport function addYears(date, amount) {\n  // If the date is Feb 29 and the new year is not a leap year, Feb 28 of the\n  // new year will be returned.\n  const newDate = new Date(date);\n  const expectedMonth = newDate.getMonth();\n  const time = newDate.setFullYear(newDate.getFullYear() + amount);\n  return expectedMonth === 1 && newDate.getMonth() === 2 ? newDate.setDate(0) : time;\n}\n\n// Calculate the distance bettwen 2 days of the week\nfunction dayDiff(day, from) {\n  return (day - from + 7) % 7;\n}\n\n// Get the date of the specified day of the week of given base date\nexport function dayOfTheWeekOf(baseDate, dayOfWeek, weekStart = 0) {\n  const baseDay = new Date(baseDate).getDay();\n  return addDays(baseDate, dayDiff(dayOfWeek, weekStart) - dayDiff(baseDay, weekStart));\n}\n\n// Get the ISO week of a date\nexport function getWeek(date) {\n  // start of ISO week is Monday\n  const thuOfTheWeek = dayOfTheWeekOf(date, 4, 1);\n  // 1st week == the week where the 4th of January is in\n  const firstThu = dayOfTheWeekOf(new Date(thuOfTheWeek).setMonth(0, 4), 4, 1);\n  return Math.round((thuOfTheWeek - firstThu) / 604800000) + 1;\n}\n\n// Get the start year of the period of years that includes given date\n// years: length of the year period\nexport function startOfYearPeriod(date, years) {\n  /* @see https://en.wikipedia.org/wiki/Year_zero#ISO_8601 */\n  const year = new Date(date).getFullYear();\n  return Math.floor(year / years) * years;\n}\n\n// Convert date to the first/last date of the month/year of the date\nexport function regularizeDate(date, timeSpan, useLastDate) {\n  if (timeSpan !== 1 && timeSpan !== 2) {\n    return date;\n  }\n  const newDate = new Date(date);\n  if (timeSpan === 1) {\n    useLastDate\n      ? newDate.setMonth(newDate.getMonth() + 1, 0)\n      : newDate.setDate(1);\n  } else {\n    useLastDate\n      ? newDate.setFullYear(newDate.getFullYear() + 1, 0, 0)\n      : newDate.setMonth(0, 1);\n  }\n  return newDate.setHours(0, 0, 0, 0);\n}\n"]},"metadata":{},"sourceType":"module"}