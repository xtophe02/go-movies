{"ast":null,"code":"import { pushUnique } from '../../lib/utils.js';\nimport { parseHTML, replaceChildNodes } from '../../lib/dom.js'; // Base class of the view classes\n\nexport default class View {\n  constructor(picker, config) {\n    Object.assign(this, config, {\n      picker,\n      element: parseHTML(`<div class=\"datepicker-view\"></div>`).firstChild,\n      selected: []\n    });\n    this.init(this.picker.datepicker.config);\n  }\n\n  init(options) {\n    if (options.pickLevel !== undefined) {\n      this.isMinView = this.id === options.pickLevel;\n    }\n\n    this.setOptions(options);\n    this.updateFocus();\n    this.updateSelection();\n  } // Execute beforeShow() callback and apply the result to the element\n  // args:\n  // - current - current value on the iteration on view rendering\n  // - timeValue - time value of the date to pass to beforeShow()\n\n\n  performBeforeHook(el, current, timeValue) {\n    let result = this.beforeShow(new Date(timeValue));\n\n    switch (typeof result) {\n      case 'boolean':\n        result = {\n          enabled: result\n        };\n        break;\n\n      case 'string':\n        result = {\n          classes: result\n        };\n    }\n\n    if (result) {\n      if (result.enabled === false) {\n        el.classList.add('disabled');\n        pushUnique(this.disabled, current);\n      }\n\n      if (result.classes) {\n        const extraClasses = result.classes.split(/\\s+/);\n        el.classList.add(...extraClasses);\n\n        if (extraClasses.includes('disabled')) {\n          pushUnique(this.disabled, current);\n        }\n      }\n\n      if (result.content) {\n        replaceChildNodes(el, result.content);\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/node_modules/vanillajs-datepicker/js/picker/views/View.js"],"names":["pushUnique","parseHTML","replaceChildNodes","View","constructor","picker","config","Object","assign","element","firstChild","selected","init","datepicker","options","pickLevel","undefined","isMinView","id","setOptions","updateFocus","updateSelection","performBeforeHook","el","current","timeValue","result","beforeShow","Date","enabled","classes","classList","add","disabled","extraClasses","split","includes","content"],"mappings":"AAAA,SAAQA,UAAR,QAAyB,oBAAzB;AACA,SAAQC,SAAR,EAAmBC,iBAAnB,QAA2C,kBAA3C,C,CAEA;;AACA,eAAe,MAAMC,IAAN,CAAW;AACxBC,EAAAA,WAAW,CAACC,MAAD,EAASC,MAAT,EAAiB;AAC1BC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,MAApB,EAA4B;AAC1BD,MAAAA,MAD0B;AAE1BI,MAAAA,OAAO,EAAER,SAAS,CAAE,qCAAF,CAAT,CAAiDS,UAFhC;AAG1BC,MAAAA,QAAQ,EAAE;AAHgB,KAA5B;AAKA,SAAKC,IAAL,CAAU,KAAKP,MAAL,CAAYQ,UAAZ,CAAuBP,MAAjC;AACD;;AAEDM,EAAAA,IAAI,CAACE,OAAD,EAAU;AACZ,QAAIA,OAAO,CAACC,SAAR,KAAsBC,SAA1B,EAAqC;AACnC,WAAKC,SAAL,GAAiB,KAAKC,EAAL,KAAYJ,OAAO,CAACC,SAArC;AACD;;AACD,SAAKI,UAAL,CAAgBL,OAAhB;AACA,SAAKM,WAAL;AACA,SAAKC,eAAL;AACD,GAjBuB,CAmBxB;AACA;AACA;AACA;;;AACAC,EAAAA,iBAAiB,CAACC,EAAD,EAAKC,OAAL,EAAcC,SAAd,EAAyB;AACxC,QAAIC,MAAM,GAAG,KAAKC,UAAL,CAAgB,IAAIC,IAAJ,CAASH,SAAT,CAAhB,CAAb;;AACA,YAAQ,OAAOC,MAAf;AACE,WAAK,SAAL;AACEA,QAAAA,MAAM,GAAG;AAACG,UAAAA,OAAO,EAAEH;AAAV,SAAT;AACA;;AACF,WAAK,QAAL;AACEA,QAAAA,MAAM,GAAG;AAACI,UAAAA,OAAO,EAAEJ;AAAV,SAAT;AALJ;;AAQA,QAAIA,MAAJ,EAAY;AACV,UAAIA,MAAM,CAACG,OAAP,KAAmB,KAAvB,EAA8B;AAC5BN,QAAAA,EAAE,CAACQ,SAAH,CAAaC,GAAb,CAAiB,UAAjB;AACAhC,QAAAA,UAAU,CAAC,KAAKiC,QAAN,EAAgBT,OAAhB,CAAV;AACD;;AACD,UAAIE,MAAM,CAACI,OAAX,EAAoB;AAClB,cAAMI,YAAY,GAAGR,MAAM,CAACI,OAAP,CAAeK,KAAf,CAAqB,KAArB,CAArB;AACAZ,QAAAA,EAAE,CAACQ,SAAH,CAAaC,GAAb,CAAiB,GAAGE,YAApB;;AACA,YAAIA,YAAY,CAACE,QAAb,CAAsB,UAAtB,CAAJ,EAAuC;AACrCpC,UAAAA,UAAU,CAAC,KAAKiC,QAAN,EAAgBT,OAAhB,CAAV;AACD;AACF;;AACD,UAAIE,MAAM,CAACW,OAAX,EAAoB;AAClBnC,QAAAA,iBAAiB,CAACqB,EAAD,EAAKG,MAAM,CAACW,OAAZ,CAAjB;AACD;AACF;AACF;;AAjDuB","sourcesContent":["import {pushUnique} from '../../lib/utils.js';\nimport {parseHTML, replaceChildNodes} from '../../lib/dom.js';\n\n// Base class of the view classes\nexport default class View {\n  constructor(picker, config) {\n    Object.assign(this, config, {\n      picker,\n      element: parseHTML(`<div class=\"datepicker-view\"></div>`).firstChild,\n      selected: [],\n    });\n    this.init(this.picker.datepicker.config);\n  }\n\n  init(options) {\n    if (options.pickLevel !== undefined) {\n      this.isMinView = this.id === options.pickLevel;\n    }\n    this.setOptions(options);\n    this.updateFocus();\n    this.updateSelection();\n  }\n\n  // Execute beforeShow() callback and apply the result to the element\n  // args:\n  // - current - current value on the iteration on view rendering\n  // - timeValue - time value of the date to pass to beforeShow()\n  performBeforeHook(el, current, timeValue) {\n    let result = this.beforeShow(new Date(timeValue));\n    switch (typeof result) {\n      case 'boolean':\n        result = {enabled: result};\n        break;\n      case 'string':\n        result = {classes: result};\n    }\n\n    if (result) {\n      if (result.enabled === false) {\n        el.classList.add('disabled');\n        pushUnique(this.disabled, current);\n      }\n      if (result.classes) {\n        const extraClasses = result.classes.split(/\\s+/);\n        el.classList.add(...extraClasses);\n        if (extraClasses.includes('disabled')) {\n          pushUnique(this.disabled, current);\n        }\n      }\n      if (result.content) {\n        replaceChildNodes(el, result.content);\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}