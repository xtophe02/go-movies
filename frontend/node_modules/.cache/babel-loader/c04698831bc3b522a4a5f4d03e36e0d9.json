{"ast":null,"code":"/**\n * @class EventEmitter\n *\n * @property {Array} _listeners\n */\nexport default class EventEmitter {\n  /**\n   * Construct EventEmitter\n   * \n   * @param {Array} listeners \n   */\n  constructor() {\n    let listeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    this._listeners = new Map(listeners);\n    this._events = new Map();\n  }\n  /**\n      * Destroys EventEmitter\n      */\n\n\n  destroy() {\n    this._listeners = {};\n    this.events = [];\n  }\n  /**\n   * Count listeners registered for the provided eventName\n   * \n   * @param {string} eventName \n   */\n\n\n  listenerCount(eventName) {\n    if (!this._listeners.has(eventName)) {\n      return 0;\n    }\n\n    return this._listeners.get(eventName).length;\n  }\n  /**\n      * Subscribes on event eventName specified function\n   * \n      * @param {string} eventName\n      * @param {function} listener\n      */\n\n\n  on(eventName, listener) {\n    this._addListener(eventName, listener, false);\n  }\n  /**\n      * Subscribes on event name specified function to fire only once\n   * \n      * @param {string} eventName\n      * @param {function} listener\n      */\n\n\n  once(eventName, listener) {\n    this._addListener(eventName, listener, true);\n  }\n  /**\n      * Removes event with specified eventName.\n   * \n      * @param {string} eventName\n      */\n\n\n  off(eventName) {\n    this._removeListeners(eventName);\n  }\n  /**\n      * Emits event with specified name and params.\n   * \n      * @param {string} eventName\n      * @param eventArgs\n      */\n\n\n  emit(eventName) {\n    for (var _len = arguments.length, eventArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      eventArgs[_key - 1] = arguments[_key];\n    }\n\n    return this._applyEvents(eventName, eventArgs);\n  }\n  /**\n   * Register a new listener\n   * \n   * @param {string} eventName \n   * @param {function} listener \n   * @param {bool} once \n   */\n\n\n  _addListener(eventName, listener) {\n    let once = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (Array.isArray(eventName)) {\n      eventName.forEach(e => this._addListener(e, listener, once));\n    } else {\n      eventName = eventName.toString();\n      const split = eventName.split(/,|, | /);\n\n      if (split.length > 1) {\n        split.forEach(e => this._addListener(e, listener, once));\n      } else {\n        if (!Array.isArray(this._listeners.get(eventName))) {\n          this._listeners.set(eventName, []);\n        }\n\n        this._listeners.get(eventName).push({\n          once: once,\n          fn: listener\n        });\n      }\n    }\n  }\n  /**\n   * \n   * @param {string|null} eventName \n   */\n\n\n  _removeListeners() {\n    let eventName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    if (eventName !== null) {\n      if (Array.isArray(eventName)) {\n        name.forEach(e => this.removeListeners(e));\n      } else {\n        eventName = eventName.toString();\n        const split = eventName.split(/,|, | /);\n\n        if (split.length > 1) {\n          split.forEach(e => this.removeListeners(e));\n        } else {\n          this._listeners.delete(eventName);\n        }\n      }\n    } else {\n      this._listeners = new Map();\n    }\n  }\n  /**\n      * Applies arguments to specified event\n   * \n      * @param {string} eventName\n      * @param {*[]} eventArguments\n      * @protected\n      */\n\n\n  _applyEvents(eventName, eventArguments) {\n    let result = eventArguments;\n\n    if (this._listeners.has(eventName)) {\n      const listeners = this._listeners.get(eventName);\n\n      let removableListeners = [];\n      listeners.forEach((listener, index) => {\n        if (result = listener.fn.apply(null, eventArguments)) {\n          if (listener.once) {\n            removableListeners.unshift(index);\n          }\n        }\n      });\n      removableListeners.forEach(index => {\n        listeners.splice(index, 1);\n      });\n      return result;\n    }\n\n    return result[0];\n  }\n\n}","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/node_modules/@creativebulma/bulma-tagsinput/src/js/utils/events.js"],"names":["EventEmitter","constructor","listeners","_listeners","Map","_events","destroy","events","listenerCount","eventName","has","get","length","on","listener","_addListener","once","off","_removeListeners","emit","eventArgs","_applyEvents","Array","isArray","forEach","e","toString","split","set","push","fn","name","removeListeners","delete","eventArguments","result","removableListeners","index","apply","unshift","splice"],"mappings":"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","sourcesContent":["/**\n * @class EventEmitter\n *\n * @property {Array} _listeners\n */\nexport default class EventEmitter {\n\t/**\n\t * Construct EventEmitter\n\t * \n\t * @param {Array} listeners \n\t */\n\tconstructor(listeners = []) {\n\t\tthis._listeners = new Map(listeners);\n\t\tthis._events = new Map();\n\t}\n\n\t/**\n     * Destroys EventEmitter\n     */\n    destroy() {\n        this._listeners = {};\n        this.events = [];\n    }\n\n\t/**\n\t * Count listeners registered for the provided eventName\n\t * \n\t * @param {string} eventName \n\t */\n\tlistenerCount(eventName) {\n\t\tif (!this._listeners.has(eventName)) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn this._listeners.get(eventName).length;\n\t}\n\n\t/**\n     * Subscribes on event eventName specified function\n\t * \n     * @param {string} eventName\n     * @param {function} listener\n     */\n\ton(eventName, listener) {\n\t\tthis._addListener(eventName, listener, false);\n\t}\n\n\t/**\n     * Subscribes on event name specified function to fire only once\n\t * \n     * @param {string} eventName\n     * @param {function} listener\n     */\n\tonce(eventName, listener) {\n\t\tthis._addListener(eventName, listener, true);\n\t}\n\n\t/**\n     * Removes event with specified eventName.\n\t * \n     * @param {string} eventName\n     */\n    off(eventName) {\n\t\tthis._removeListeners(eventName);\n\t}\n\n\t/**\n     * Emits event with specified name and params.\n\t * \n     * @param {string} eventName\n     * @param eventArgs\n     */\n    emit(eventName, ...eventArgs) {\n        return this._applyEvents(eventName, eventArgs);\n\t}\n\t\n\t/**\n\t * Register a new listener\n\t * \n\t * @param {string} eventName \n\t * @param {function} listener \n\t * @param {bool} once \n\t */\n\t_addListener(eventName, listener, once = false) {\n\t\tif (Array.isArray(eventName)) {\n\t\t\teventName.forEach(e => this._addListener(e, listener, once));\n\t\t} else {\n\t\t\teventName = eventName.toString();\n\t\t\tconst split = eventName.split(/,|, | /);\n\n\t\t\tif (split.length > 1) {\n\t\t\t\tsplit.forEach(e => this._addListener(e, listener, once));\n\t\t\t} else {\n\t\t\t\tif (!Array.isArray(this._listeners.get(eventName))) {\n\t\t\t\t\tthis._listeners.set(eventName, []);\n\t\t\t\t}\n\n\t\t\t\t(this._listeners.get(eventName)).push({\n\t\t\t\t\tonce: once,\n\t\t\t\t\tfn: listener\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @param {string|null} eventName \n\t */\n\t_removeListeners(eventName = null) {\n\t\tif (eventName !== null) {\n\t\t\tif (Array.isArray(eventName)) {\n\t\t\t\tname.forEach(e => this.removeListeners(e));\n\t\t\t} else {\n\t\t\t\teventName = eventName.toString();\n\t\t\t\tconst split = eventName.split(/,|, | /);\n\n\t\t\t\tif (split.length > 1) {\n\t\t\t\t\tsplit.forEach(e => this.removeListeners(e));\n\t\t\t\t} else {\n\t\t\t\t\tthis._listeners.delete(eventName);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis._listeners = new Map();\n\t\t}\n\t}\n\n\t/**\n     * Applies arguments to specified event\n\t * \n     * @param {string} eventName\n     * @param {*[]} eventArguments\n     * @protected\n     */\n    _applyEvents(eventName, eventArguments) {\n\t\tlet result = eventArguments;\n\n        if (this._listeners.has(eventName)) {\n\t\t\tconst listeners = this._listeners.get(eventName);\n\t\t\tlet removableListeners = [];\n\n\t\t\tlisteners.forEach((listener, index) => {\n\t\t\t\tif (result = listener.fn.apply(null, eventArguments)) {\n\t\t\t\t\tif (listener.once) {\n\t\t\t\t\t\tremovableListeners.unshift(index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\n\t\t\tremovableListeners.forEach(index => {\n\t\t\t\tlisteners.splice(index, 1);\n\t\t\t});\n\n\t\t\treturn result;\n\t\t}\n\n\t\treturn result[0];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}