{"ast":null,"code":"var _jsxFileName = \"/home/chrismo/Documents/PROJECTS/go-movies/frontend/src/routes/movies-graphql.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Link, Outlet } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst query = `{\n  allMovies {\n    id\n    title\n    year\n    description\n    runtime\n  }\n}`;\nexport default function MoviesGraphql() {\n  _s();\n\n  const [state, setState] = useState({\n    loading: true,\n    movies: [],\n    errors: null\n  });\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n    fetch(\"http://localhost:4000/v1/graphql/\", {\n      signal: signal,\n      method: \"post\",\n      body: query,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(_ref => {\n      let {\n        data\n      } = _ref;\n      return setState({\n        movies: data.allMovies,\n        loading: false\n      });\n    }).catch(err => {\n      if (err.name === \"AbortError\") {\n        console.log(\"successfully aborted\");\n      } else {\n        console.log(err); // setError(err);\n      }\n    });\n    return () => controller.abort();\n  }, []);\n\n  if (state.loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (state.error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: state.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"hero\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hero-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"title\",\n        children: \"Choose a Movie GRAPHQL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"table is-striped\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: state.movies.map(mv => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: mv.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 21\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: \"has-text-light\",\n                  children: [\"(\", mv.year, \") - \", mv.runtime, \" min\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 66,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  children: [mv.description.slice[(0, 80)], \"...\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 67,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 61,\n                columnNumber: 19\n              }, this)\n            }, mv.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MoviesGraphql, \"VdFkULeWmgUjE4vTSl+Tleooi0E=\");\n\n_c = MoviesGraphql;\n\nvar _c;\n\n$RefreshReg$(_c, \"MoviesGraphql\");","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/src/routes/movies-graphql.js"],"names":["useEffect","useState","Link","Outlet","query","MoviesGraphql","state","setState","loading","movies","errors","controller","AbortController","signal","fetch","method","body","headers","then","res","json","data","allMovies","catch","err","name","console","log","abort","error","map","mv","title","year","runtime","description","slice","id"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Link, Outlet } from \"react-router-dom\";\n\nconst query = `{\n  allMovies {\n    id\n    title\n    year\n    description\n    runtime\n  }\n}`;\n\nexport default function MoviesGraphql() {\n  const [state, setState] = useState({\n    loading: true,\n    movies: [],\n    errors: null,\n  });\n  useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    fetch(\"http://localhost:4000/v1/graphql/\", {\n      signal: signal,\n      method: \"post\",\n      body: query,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then(({ data }) => setState({ movies: data.allMovies, loading: false }))\n      .catch((err) => {\n        if (err.name === \"AbortError\") {\n          console.log(\"successfully aborted\");\n        } else {\n          console.log(err);\n          // setError(err);\n        }\n      });\n    return () => controller.abort();\n  }, []);\n  if (state.loading) {\n    return <p>loading...</p>;\n  }\n  if (state.error) {\n    return <p>{state.error}</p>;\n  }\n\n  return (\n    <section className=\"hero\">\n      <div className=\"hero-body\">\n        <p className=\"title\">Choose a Movie GRAPHQL</p>\n        <div className=\"content\">\n          <table className=\"table is-striped\">\n            <tbody>\n              {state.movies.map((mv) => (\n                <tr key={mv.id}>\n                  {/* <Link to={`/movies/${mv.id}`}>{mv.title}</Link> */}\n                  <td>\n                    <strong>{mv.title}</strong> <br />\n                    <small className=\"has-text-light\">\n                      ({mv.year}) - {mv.runtime} min\n                    </small>\n                    <br />\n                    <small>{mv.description.slice[(0, 80)]}...</small>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        <Outlet />\n      </div>\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}