{"ast":null,"code":"var _jsxFileName = \"/home/chrismo/Documents/PROJECTS/go-movies/frontend/src/routes/movies.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Link, Outlet } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst fetchMovies = async () => {\n  try {\n    const res = await fetch(`${process.env.REACT_APP_URL}/v1/movies`); // console.log(res);\n\n    if (!res.ok) {\n      throw new Error(res.statusText);\n    }\n\n    return res.json();\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport default function Movies() {\n  _s();\n\n  const [state, setState] = useState({\n    loading: true,\n    movies: [],\n    error: null\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetchMovies();\n\n      if (!res.movies) {\n        setState(prev => ({ ...prev,\n          loading: false,\n          error: res\n        }));\n      } else {\n        setState(prev => ({ ...prev,\n          loading: false,\n          movies: res.movies\n        }));\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  if (state.loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (state.error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: state.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"hero\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hero-body\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"title\",\n        children: \"Choose a Movie REST\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: state.movies.map(mv => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              to: `/movies/${mv.id}`,\n              children: mv.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this)\n          }, mv.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Movies, \"VhLTZIyCaK539Npy7XUYBhwYgWg=\");\n\n_c = Movies;\n\nvar _c;\n\n$RefreshReg$(_c, \"Movies\");","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/src/routes/movies.js"],"names":["useEffect","useState","Link","Outlet","fetchMovies","res","fetch","process","env","REACT_APP_URL","ok","Error","statusText","json","error","message","Movies","state","setState","loading","movies","fetchData","prev","map","mv","id","title"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,kBAA7B;;;AAEA,MAAMC,WAAW,GAAG,YAAY;AAC9B,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,aAAc,YAA9B,CAAvB,CADE,CAEF;;AACA,QAAI,CAACJ,GAAG,CAACK,EAAT,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAUN,GAAG,CAACO,UAAd,CAAN;AACD;;AACD,WAAOP,GAAG,CAACQ,IAAJ,EAAP;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACd,WAAOA,KAAK,CAACC,OAAb;AACD;AACF,CAXD;;AAaA,eAAe,SAASC,MAAT,GAAkB;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC;AACjCkB,IAAAA,OAAO,EAAE,IADwB;AAEjCC,IAAAA,MAAM,EAAE,EAFyB;AAGjCN,IAAAA,KAAK,EAAE;AAH0B,GAAD,CAAlC;AAKAd,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,SAAS,GAAG,YAAY;AAC5B,YAAMhB,GAAG,GAAG,MAAMD,WAAW,EAA7B;;AACA,UAAI,CAACC,GAAG,CAACe,MAAT,EAAiB;AACfF,QAAAA,QAAQ,CAAEI,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWH,UAAAA,OAAO,EAAE,KAApB;AAA2BL,UAAAA,KAAK,EAAET;AAAlC,SAAX,CAAD,CAAR;AACD,OAFD,MAEO;AACLa,QAAAA,QAAQ,CAAEI,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWH,UAAAA,OAAO,EAAE,KAApB;AAA2BC,UAAAA,MAAM,EAAEf,GAAG,CAACe;AAAvC,SAAX,CAAD,CAAR;AACD;AACF,KAPD;;AAQAC,IAAAA,SAAS;AACV,GAVQ,EAUN,EAVM,CAAT;;AAWA,MAAIJ,KAAK,CAACE,OAAV,EAAmB;AACjB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAIF,KAAK,CAACH,KAAV,EAAiB;AACf,wBAAO;AAAA,gBAAIG,KAAK,CAACH;AAAV;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,sBACE;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,OAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,+BACE;AAAA,oBACGG,KAAK,CAACG,MAAN,CAAaG,GAAb,CAAkBC,EAAD,iBAChB;AAAA,mCACE,QAAC,IAAD;AAAM,cAAA,EAAE,EAAG,WAAUA,EAAE,CAACC,EAAG,EAA3B;AAAA,wBAA+BD,EAAE,CAACE;AAAlC;AAAA;AAAA;AAAA;AAAA;AADF,aAASF,EAAE,CAACC,EAAZ;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF,eAWE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GAzCuBT,M;;KAAAA,M","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { Link, Outlet } from \"react-router-dom\";\n\nconst fetchMovies = async () => {\n  try {\n    const res = await fetch(`${process.env.REACT_APP_URL}/v1/movies`);\n    // console.log(res);\n    if (!res.ok) {\n      throw new Error(res.statusText);\n    }\n    return res.json();\n  } catch (error) {\n    return error.message;\n  }\n};\n\nexport default function Movies() {\n  const [state, setState] = useState({\n    loading: true,\n    movies: [],\n    error: null,\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      const res = await fetchMovies();\n      if (!res.movies) {\n        setState((prev) => ({ ...prev, loading: false, error: res }));\n      } else {\n        setState((prev) => ({ ...prev, loading: false, movies: res.movies }));\n      }\n    };\n    fetchData();\n  }, []);\n  if (state.loading) {\n    return <p>loading...</p>;\n  }\n  if (state.error) {\n    return <p>{state.error}</p>;\n  }\n\n  return (\n    <section className=\"hero\">\n      <div className=\"hero-body\">\n        <p className=\"title\">Choose a Movie REST</p>\n        <div className=\"content\">\n          <ul>\n            {state.movies.map((mv) => (\n              <li key={mv.id}>\n                <Link to={`/movies/${mv.id}`}>{mv.title}</Link>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <Outlet />\n      </div>\n    </section>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}