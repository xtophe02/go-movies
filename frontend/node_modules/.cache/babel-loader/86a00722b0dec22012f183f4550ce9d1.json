{"ast":null,"code":"import { hasProperty, pushUnique, createTagRepeat } from '../../lib/utils.js';\nimport { dateValue } from '../../lib/date.js';\nimport { parseHTML } from '../../lib/dom.js';\nimport View from './View.js';\n\nfunction computeMonthRange(range, thisYear) {\n  if (!range || !range[0] || !range[1]) {\n    return;\n  }\n\n  const [[startY, startM], [endY, endM]] = range;\n\n  if (startY > thisYear || endY < thisYear) {\n    return;\n  }\n\n  return [startY === thisYear ? startM : -1, endY === thisYear ? endM : 12];\n}\n\nexport default class MonthsView extends View {\n  constructor(picker) {\n    super(picker, {\n      id: 1,\n      name: 'months',\n      cellClass: 'month'\n    });\n  }\n\n  init(options) {\n    let onConstruction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (onConstruction) {\n      this.grid = this.element;\n      this.element.classList.add('months', 'datepicker-grid');\n      this.grid.appendChild(parseHTML(createTagRepeat('span', 12, {\n        'data-month': ix => ix\n      })));\n    }\n\n    super.init(options);\n  }\n\n  setOptions(options) {\n    if (options.locale) {\n      this.monthNames = options.locale.monthsShort;\n    }\n\n    if (hasProperty(options, 'minDate')) {\n      if (options.minDate === undefined) {\n        this.minYear = this.minMonth = this.minDate = undefined;\n      } else {\n        const minDateObj = new Date(options.minDate);\n        this.minYear = minDateObj.getFullYear();\n        this.minMonth = minDateObj.getMonth();\n        this.minDate = minDateObj.setDate(1);\n      }\n    }\n\n    if (hasProperty(options, 'maxDate')) {\n      if (options.maxDate === undefined) {\n        this.maxYear = this.maxMonth = this.maxDate = undefined;\n      } else {\n        const maxDateObj = new Date(options.maxDate);\n        this.maxYear = maxDateObj.getFullYear();\n        this.maxMonth = maxDateObj.getMonth();\n        this.maxDate = dateValue(this.maxYear, this.maxMonth + 1, 0);\n      }\n    }\n\n    if (this.isMinView) {\n      if (options.datesDisabled) {\n        this.datesDisabled = options.datesDisabled;\n      }\n    } else {\n      this.datesDisabled = [];\n    }\n\n    if (options.beforeShowMonth !== undefined) {\n      this.beforeShow = typeof options.beforeShowMonth === 'function' ? options.beforeShowMonth : undefined;\n    }\n  } // Update view's settings to reflect the viewDate set on the picker\n\n\n  updateFocus() {\n    const viewDate = new Date(this.picker.viewDate);\n    this.year = viewDate.getFullYear();\n    this.focused = viewDate.getMonth();\n  } // Update view's settings to reflect the selected dates\n\n\n  updateSelection() {\n    const {\n      dates,\n      rangepicker\n    } = this.picker.datepicker;\n    this.selected = dates.reduce((selected, timeValue) => {\n      const date = new Date(timeValue);\n      const year = date.getFullYear();\n      const month = date.getMonth();\n\n      if (selected[year] === undefined) {\n        selected[year] = [month];\n      } else {\n        pushUnique(selected[year], month);\n      }\n\n      return selected;\n    }, {});\n\n    if (rangepicker && rangepicker.dates) {\n      this.range = rangepicker.dates.map(timeValue => {\n        const date = new Date(timeValue);\n        return isNaN(date) ? undefined : [date.getFullYear(), date.getMonth()];\n      });\n    }\n  } // Update the entire view UI\n\n\n  render() {\n    // refresh disabled months on every render in order to clear the ones added\n    // by beforeShow hook at previous render\n    // this.disabled = [...this.datesDisabled];\n    this.disabled = this.datesDisabled.reduce((arr, disabled) => {\n      const dt = new Date(disabled);\n\n      if (this.year === dt.getFullYear()) {\n        arr.push(dt.getMonth());\n      }\n\n      return arr;\n    }, []);\n    this.picker.setViewSwitchLabel(this.year);\n    this.picker.setPrevBtnDisabled(this.year <= this.minYear);\n    this.picker.setNextBtnDisabled(this.year >= this.maxYear);\n    const selected = this.selected[this.year] || [];\n    const yrOutOfRange = this.year < this.minYear || this.year > this.maxYear;\n    const isMinYear = this.year === this.minYear;\n    const isMaxYear = this.year === this.maxYear;\n    const range = computeMonthRange(this.range, this.year);\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      const date = dateValue(this.year, index, 1);\n      el.className = `datepicker-cell ${this.cellClass}`;\n\n      if (this.isMinView) {\n        el.dataset.date = date;\n      } // reset text on every render to clear the custom content set\n      // by beforeShow hook at previous render\n\n\n      el.textContent = this.monthNames[index];\n\n      if (yrOutOfRange || isMinYear && index < this.minMonth || isMaxYear && index > this.maxMonth || this.disabled.includes(index)) {\n        classList.add('disabled');\n      }\n\n      if (range) {\n        const [rangeStart, rangeEnd] = range;\n\n        if (index > rangeStart && index < rangeEnd) {\n          classList.add('range');\n        }\n\n        if (index === rangeStart) {\n          classList.add('range-start');\n        }\n\n        if (index === rangeEnd) {\n          classList.add('range-end');\n        }\n      }\n\n      if (selected.includes(index)) {\n        classList.add('selected');\n      }\n\n      if (index === this.focused) {\n        classList.add('focused');\n      }\n\n      if (this.beforeShow) {\n        this.performBeforeHook(el, index, date);\n      }\n    });\n  } // Update the view UI by applying the changes of selected and focused items\n\n\n  refresh() {\n    const selected = this.selected[this.year] || [];\n    const [rangeStart, rangeEnd] = computeMonthRange(this.range, this.year) || [];\n    this.grid.querySelectorAll('.range, .range-start, .range-end, .selected, .focused').forEach(el => {\n      el.classList.remove('range', 'range-start', 'range-end', 'selected', 'focused');\n    });\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n\n      if (index > rangeStart && index < rangeEnd) {\n        classList.add('range');\n      }\n\n      if (index === rangeStart) {\n        classList.add('range-start');\n      }\n\n      if (index === rangeEnd) {\n        classList.add('range-end');\n      }\n\n      if (selected.includes(index)) {\n        classList.add('selected');\n      }\n\n      if (index === this.focused) {\n        classList.add('focused');\n      }\n    });\n  } // Update the view UI by applying the change of focused item\n\n\n  refreshFocus() {\n    this.grid.querySelectorAll('.focused').forEach(el => {\n      el.classList.remove('focused');\n    });\n    this.grid.children[this.focused].classList.add('focused');\n  }\n\n}","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/node_modules/vanillajs-datepicker/js/picker/views/MonthsView.js"],"names":["hasProperty","pushUnique","createTagRepeat","dateValue","parseHTML","View","computeMonthRange","range","thisYear","startY","startM","endY","endM","MonthsView","constructor","picker","id","name","cellClass","init","options","onConstruction","grid","element","classList","add","appendChild","ix","setOptions","locale","monthNames","monthsShort","minDate","undefined","minYear","minMonth","minDateObj","Date","getFullYear","getMonth","setDate","maxDate","maxYear","maxMonth","maxDateObj","isMinView","datesDisabled","beforeShowMonth","beforeShow","updateFocus","viewDate","year","focused","updateSelection","dates","rangepicker","datepicker","selected","reduce","timeValue","date","month","map","isNaN","render","disabled","arr","dt","push","setViewSwitchLabel","setPrevBtnDisabled","setNextBtnDisabled","yrOutOfRange","isMinYear","isMaxYear","Array","from","children","forEach","el","index","className","dataset","textContent","includes","rangeStart","rangeEnd","performBeforeHook","refresh","querySelectorAll","remove","refreshFocus"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,UAArB,EAAiCC,eAAjC,QAAuD,oBAAvD;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCC,QAAlC,EAA4C;AAC1C,MAAI,CAACD,KAAD,IAAU,CAACA,KAAK,CAAC,CAAD,CAAhB,IAAuB,CAACA,KAAK,CAAC,CAAD,CAAjC,EAAsC;AACpC;AACD;;AAED,QAAM,CAAC,CAACE,MAAD,EAASC,MAAT,CAAD,EAAmB,CAACC,IAAD,EAAOC,IAAP,CAAnB,IAAmCL,KAAzC;;AACA,MAAIE,MAAM,GAAGD,QAAT,IAAqBG,IAAI,GAAGH,QAAhC,EAA0C;AACxC;AACD;;AACD,SAAO,CACLC,MAAM,KAAKD,QAAX,GAAsBE,MAAtB,GAA+B,CAAC,CAD3B,EAELC,IAAI,KAAKH,QAAT,GAAoBI,IAApB,GAA2B,EAFtB,CAAP;AAID;;AAED,eAAe,MAAMC,UAAN,SAAyBR,IAAzB,CAA8B;AAC3CS,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,UAAMA,MAAN,EAAc;AACZC,MAAAA,EAAE,EAAE,CADQ;AAEZC,MAAAA,IAAI,EAAE,QAFM;AAGZC,MAAAA,SAAS,EAAE;AAHC,KAAd;AAKD;;AAEDC,EAAAA,IAAI,CAACC,OAAD,EAAiC;AAAA,QAAvBC,cAAuB,uEAAN,IAAM;;AACnC,QAAIA,cAAJ,EAAoB;AAClB,WAAKC,IAAL,GAAY,KAAKC,OAAjB;AACA,WAAKA,OAAL,CAAaC,SAAb,CAAuBC,GAAvB,CAA2B,QAA3B,EAAqC,iBAArC;AACA,WAAKH,IAAL,CAAUI,WAAV,CAAsBtB,SAAS,CAACF,eAAe,CAAC,MAAD,EAAS,EAAT,EAAa;AAAC,sBAAcyB,EAAE,IAAIA;AAArB,OAAb,CAAhB,CAA/B;AACD;;AACD,UAAMR,IAAN,CAAWC,OAAX;AACD;;AAEDQ,EAAAA,UAAU,CAACR,OAAD,EAAU;AAClB,QAAIA,OAAO,CAACS,MAAZ,EAAoB;AAClB,WAAKC,UAAL,GAAkBV,OAAO,CAACS,MAAR,CAAeE,WAAjC;AACD;;AACD,QAAI/B,WAAW,CAACoB,OAAD,EAAU,SAAV,CAAf,EAAqC;AACnC,UAAIA,OAAO,CAACY,OAAR,KAAoBC,SAAxB,EAAmC;AACjC,aAAKC,OAAL,GAAe,KAAKC,QAAL,GAAgB,KAAKH,OAAL,GAAeC,SAA9C;AACD,OAFD,MAEO;AACL,cAAMG,UAAU,GAAG,IAAIC,IAAJ,CAASjB,OAAO,CAACY,OAAjB,CAAnB;AACA,aAAKE,OAAL,GAAeE,UAAU,CAACE,WAAX,EAAf;AACA,aAAKH,QAAL,GAAgBC,UAAU,CAACG,QAAX,EAAhB;AACA,aAAKP,OAAL,GAAeI,UAAU,CAACI,OAAX,CAAmB,CAAnB,CAAf;AACD;AACF;;AACD,QAAIxC,WAAW,CAACoB,OAAD,EAAU,SAAV,CAAf,EAAqC;AACnC,UAAIA,OAAO,CAACqB,OAAR,KAAoBR,SAAxB,EAAmC;AACjC,aAAKS,OAAL,GAAe,KAAKC,QAAL,GAAgB,KAAKF,OAAL,GAAeR,SAA9C;AACD,OAFD,MAEO;AACL,cAAMW,UAAU,GAAG,IAAIP,IAAJ,CAASjB,OAAO,CAACqB,OAAjB,CAAnB;AACA,aAAKC,OAAL,GAAeE,UAAU,CAACN,WAAX,EAAf;AACA,aAAKK,QAAL,GAAgBC,UAAU,CAACL,QAAX,EAAhB;AACA,aAAKE,OAAL,GAAetC,SAAS,CAAC,KAAKuC,OAAN,EAAe,KAAKC,QAAL,GAAgB,CAA/B,EAAkC,CAAlC,CAAxB;AACD;AACF;;AACD,QAAI,KAAKE,SAAT,EAAoB;AAClB,UAAIzB,OAAO,CAAC0B,aAAZ,EAA2B;AACzB,aAAKA,aAAL,GAAqB1B,OAAO,CAAC0B,aAA7B;AACD;AACF,KAJD,MAIO;AACL,WAAKA,aAAL,GAAqB,EAArB;AACD;;AACD,QAAI1B,OAAO,CAAC2B,eAAR,KAA4Bd,SAAhC,EAA2C;AACzC,WAAKe,UAAL,GAAkB,OAAO5B,OAAO,CAAC2B,eAAf,KAAmC,UAAnC,GACd3B,OAAO,CAAC2B,eADM,GAEdd,SAFJ;AAGD;AACF,GAtD0C,CAwD3C;;;AACAgB,EAAAA,WAAW,GAAG;AACZ,UAAMC,QAAQ,GAAG,IAAIb,IAAJ,CAAS,KAAKtB,MAAL,CAAYmC,QAArB,CAAjB;AACA,SAAKC,IAAL,GAAYD,QAAQ,CAACZ,WAAT,EAAZ;AACA,SAAKc,OAAL,GAAeF,QAAQ,CAACX,QAAT,EAAf;AACD,GA7D0C,CA+D3C;;;AACAc,EAAAA,eAAe,GAAG;AAChB,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAuB,KAAKxC,MAAL,CAAYyC,UAAzC;AACA,SAAKC,QAAL,GAAgBH,KAAK,CAACI,MAAN,CAAa,CAACD,QAAD,EAAWE,SAAX,KAAyB;AACpD,YAAMC,IAAI,GAAG,IAAIvB,IAAJ,CAASsB,SAAT,CAAb;AACA,YAAMR,IAAI,GAAGS,IAAI,CAACtB,WAAL,EAAb;AACA,YAAMuB,KAAK,GAAGD,IAAI,CAACrB,QAAL,EAAd;;AACA,UAAIkB,QAAQ,CAACN,IAAD,CAAR,KAAmBlB,SAAvB,EAAkC;AAChCwB,QAAAA,QAAQ,CAACN,IAAD,CAAR,GAAiB,CAACU,KAAD,CAAjB;AACD,OAFD,MAEO;AACL5D,QAAAA,UAAU,CAACwD,QAAQ,CAACN,IAAD,CAAT,EAAiBU,KAAjB,CAAV;AACD;;AACD,aAAOJ,QAAP;AACD,KAVe,EAUb,EAVa,CAAhB;;AAWA,QAAIF,WAAW,IAAIA,WAAW,CAACD,KAA/B,EAAsC;AACpC,WAAK/C,KAAL,GAAagD,WAAW,CAACD,KAAZ,CAAkBQ,GAAlB,CAAsBH,SAAS,IAAI;AAC9C,cAAMC,IAAI,GAAG,IAAIvB,IAAJ,CAASsB,SAAT,CAAb;AACA,eAAOI,KAAK,CAACH,IAAD,CAAL,GAAc3B,SAAd,GAA0B,CAAC2B,IAAI,CAACtB,WAAL,EAAD,EAAqBsB,IAAI,CAACrB,QAAL,EAArB,CAAjC;AACD,OAHY,CAAb;AAID;AACF,GAnF0C,CAqF3C;;;AACAyB,EAAAA,MAAM,GAAG;AACP;AACA;AACA;AACA,SAAKC,QAAL,GAAgB,KAAKnB,aAAL,CAAmBY,MAAnB,CAA0B,CAACQ,GAAD,EAAMD,QAAN,KAAmB;AAC3D,YAAME,EAAE,GAAG,IAAI9B,IAAJ,CAAS4B,QAAT,CAAX;;AACA,UAAI,KAAKd,IAAL,KAAcgB,EAAE,CAAC7B,WAAH,EAAlB,EAAoC;AAClC4B,QAAAA,GAAG,CAACE,IAAJ,CAASD,EAAE,CAAC5B,QAAH,EAAT;AACD;;AACD,aAAO2B,GAAP;AACD,KANe,EAMb,EANa,CAAhB;AAQA,SAAKnD,MAAL,CAAYsD,kBAAZ,CAA+B,KAAKlB,IAApC;AACA,SAAKpC,MAAL,CAAYuD,kBAAZ,CAA+B,KAAKnB,IAAL,IAAa,KAAKjB,OAAjD;AACA,SAAKnB,MAAL,CAAYwD,kBAAZ,CAA+B,KAAKpB,IAAL,IAAa,KAAKT,OAAjD;AAEA,UAAMe,QAAQ,GAAG,KAAKA,QAAL,CAAc,KAAKN,IAAnB,KAA4B,EAA7C;AACA,UAAMqB,YAAY,GAAG,KAAKrB,IAAL,GAAY,KAAKjB,OAAjB,IAA4B,KAAKiB,IAAL,GAAY,KAAKT,OAAlE;AACA,UAAM+B,SAAS,GAAG,KAAKtB,IAAL,KAAc,KAAKjB,OAArC;AACA,UAAMwC,SAAS,GAAG,KAAKvB,IAAL,KAAc,KAAKT,OAArC;AACA,UAAMnC,KAAK,GAAGD,iBAAiB,CAAC,KAAKC,KAAN,EAAa,KAAK4C,IAAlB,CAA/B;AAEAwB,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKtD,IAAL,CAAUuD,QAArB,EAA+BC,OAA/B,CAAuC,CAACC,EAAD,EAAKC,KAAL,KAAe;AACpD,YAAMxD,SAAS,GAAGuD,EAAE,CAACvD,SAArB;AACA,YAAMoC,IAAI,GAAGzD,SAAS,CAAC,KAAKgD,IAAN,EAAY6B,KAAZ,EAAmB,CAAnB,CAAtB;AAEAD,MAAAA,EAAE,CAACE,SAAH,GAAgB,mBAAkB,KAAK/D,SAAU,EAAjD;;AACA,UAAI,KAAK2B,SAAT,EAAoB;AAClBkC,QAAAA,EAAE,CAACG,OAAH,CAAWtB,IAAX,GAAkBA,IAAlB;AACD,OAPmD,CAQpD;AACA;;;AACAmB,MAAAA,EAAE,CAACI,WAAH,GAAiB,KAAKrD,UAAL,CAAgBkD,KAAhB,CAAjB;;AAEA,UACER,YAAY,IACTC,SAAS,IAAIO,KAAK,GAAG,KAAK7C,QAD7B,IAEGuC,SAAS,IAAIM,KAAK,GAAG,KAAKrC,QAF7B,IAGG,KAAKsB,QAAL,CAAcmB,QAAd,CAAuBJ,KAAvB,CAJL,EAKE;AACAxD,QAAAA,SAAS,CAACC,GAAV,CAAc,UAAd;AACD;;AACD,UAAIlB,KAAJ,EAAW;AACT,cAAM,CAAC8E,UAAD,EAAaC,QAAb,IAAyB/E,KAA/B;;AACA,YAAIyE,KAAK,GAAGK,UAAR,IAAsBL,KAAK,GAAGM,QAAlC,EAA4C;AAC1C9D,UAAAA,SAAS,CAACC,GAAV,CAAc,OAAd;AACD;;AACD,YAAIuD,KAAK,KAAKK,UAAd,EAA0B;AACxB7D,UAAAA,SAAS,CAACC,GAAV,CAAc,aAAd;AACD;;AACD,YAAIuD,KAAK,KAAKM,QAAd,EAAwB;AACtB9D,UAAAA,SAAS,CAACC,GAAV,CAAc,WAAd;AACD;AACF;;AACD,UAAIgC,QAAQ,CAAC2B,QAAT,CAAkBJ,KAAlB,CAAJ,EAA8B;AAC5BxD,QAAAA,SAAS,CAACC,GAAV,CAAc,UAAd;AACD;;AACD,UAAIuD,KAAK,KAAK,KAAK5B,OAAnB,EAA4B;AAC1B5B,QAAAA,SAAS,CAACC,GAAV,CAAc,SAAd;AACD;;AAED,UAAI,KAAKuB,UAAT,EAAqB;AACnB,aAAKuC,iBAAL,CAAuBR,EAAvB,EAA2BC,KAA3B,EAAkCpB,IAAlC;AACD;AACF,KA1CD;AA2CD,GAvJ0C,CAyJ3C;;;AACA4B,EAAAA,OAAO,GAAG;AACR,UAAM/B,QAAQ,GAAG,KAAKA,QAAL,CAAc,KAAKN,IAAnB,KAA4B,EAA7C;AACA,UAAM,CAACkC,UAAD,EAAaC,QAAb,IAAyBhF,iBAAiB,CAAC,KAAKC,KAAN,EAAa,KAAK4C,IAAlB,CAAjB,IAA4C,EAA3E;AACA,SAAK7B,IAAL,CACGmE,gBADH,CACoB,uDADpB,EAEGX,OAFH,CAEYC,EAAD,IAAQ;AACfA,MAAAA,EAAE,CAACvD,SAAH,CAAakE,MAAb,CAAoB,OAApB,EAA6B,aAA7B,EAA4C,WAA5C,EAAyD,UAAzD,EAAqE,SAArE;AACD,KAJH;AAKAf,IAAAA,KAAK,CAACC,IAAN,CAAW,KAAKtD,IAAL,CAAUuD,QAArB,EAA+BC,OAA/B,CAAuC,CAACC,EAAD,EAAKC,KAAL,KAAe;AACpD,YAAMxD,SAAS,GAAGuD,EAAE,CAACvD,SAArB;;AACA,UAAIwD,KAAK,GAAGK,UAAR,IAAsBL,KAAK,GAAGM,QAAlC,EAA4C;AAC1C9D,QAAAA,SAAS,CAACC,GAAV,CAAc,OAAd;AACD;;AACD,UAAIuD,KAAK,KAAKK,UAAd,EAA0B;AACxB7D,QAAAA,SAAS,CAACC,GAAV,CAAc,aAAd;AACD;;AACD,UAAIuD,KAAK,KAAKM,QAAd,EAAwB;AACtB9D,QAAAA,SAAS,CAACC,GAAV,CAAc,WAAd;AACD;;AACD,UAAIgC,QAAQ,CAAC2B,QAAT,CAAkBJ,KAAlB,CAAJ,EAA8B;AAC5BxD,QAAAA,SAAS,CAACC,GAAV,CAAc,UAAd;AACD;;AACD,UAAIuD,KAAK,KAAK,KAAK5B,OAAnB,EAA4B;AAC1B5B,QAAAA,SAAS,CAACC,GAAV,CAAc,SAAd;AACD;AACF,KAjBD;AAkBD,GApL0C,CAsL3C;;;AACAkE,EAAAA,YAAY,GAAG;AACb,SAAKrE,IAAL,CAAUmE,gBAAV,CAA2B,UAA3B,EAAuCX,OAAvC,CAAgDC,EAAD,IAAQ;AACrDA,MAAAA,EAAE,CAACvD,SAAH,CAAakE,MAAb,CAAoB,SAApB;AACD,KAFD;AAGA,SAAKpE,IAAL,CAAUuD,QAAV,CAAmB,KAAKzB,OAAxB,EAAiC5B,SAAjC,CAA2CC,GAA3C,CAA+C,SAA/C;AACD;;AA5L0C","sourcesContent":["import {hasProperty, pushUnique, createTagRepeat} from '../../lib/utils.js';\nimport {dateValue} from '../../lib/date.js';\nimport {parseHTML} from '../../lib/dom.js';\nimport View from './View.js';\n\nfunction computeMonthRange(range, thisYear) {\n  if (!range || !range[0] || !range[1]) {\n    return;\n  }\n\n  const [[startY, startM], [endY, endM]] = range;\n  if (startY > thisYear || endY < thisYear) {\n    return;\n  }\n  return [\n    startY === thisYear ? startM : -1,\n    endY === thisYear ? endM : 12,\n  ];\n}\n\nexport default class MonthsView extends View {\n  constructor(picker) {\n    super(picker, {\n      id: 1,\n      name: 'months',\n      cellClass: 'month',\n    });\n  }\n\n  init(options, onConstruction = true) {\n    if (onConstruction) {\n      this.grid = this.element;\n      this.element.classList.add('months', 'datepicker-grid');\n      this.grid.appendChild(parseHTML(createTagRepeat('span', 12, {'data-month': ix => ix})));\n    }\n    super.init(options);\n  }\n\n  setOptions(options) {\n    if (options.locale) {\n      this.monthNames = options.locale.monthsShort;\n    }\n    if (hasProperty(options, 'minDate')) {\n      if (options.minDate === undefined) {\n        this.minYear = this.minMonth = this.minDate = undefined;\n      } else {\n        const minDateObj = new Date(options.minDate);\n        this.minYear = minDateObj.getFullYear();\n        this.minMonth = minDateObj.getMonth();\n        this.minDate = minDateObj.setDate(1);\n      }\n    }\n    if (hasProperty(options, 'maxDate')) {\n      if (options.maxDate === undefined) {\n        this.maxYear = this.maxMonth = this.maxDate = undefined;\n      } else {\n        const maxDateObj = new Date(options.maxDate);\n        this.maxYear = maxDateObj.getFullYear();\n        this.maxMonth = maxDateObj.getMonth();\n        this.maxDate = dateValue(this.maxYear, this.maxMonth + 1, 0);\n      }\n    }\n    if (this.isMinView) {\n      if (options.datesDisabled) {\n        this.datesDisabled = options.datesDisabled;\n      }\n    } else {\n      this.datesDisabled = [];\n    }\n    if (options.beforeShowMonth !== undefined) {\n      this.beforeShow = typeof options.beforeShowMonth === 'function'\n        ? options.beforeShowMonth\n        : undefined;\n    }\n  }\n\n  // Update view's settings to reflect the viewDate set on the picker\n  updateFocus() {\n    const viewDate = new Date(this.picker.viewDate);\n    this.year = viewDate.getFullYear();\n    this.focused = viewDate.getMonth();\n  }\n\n  // Update view's settings to reflect the selected dates\n  updateSelection() {\n    const {dates, rangepicker} = this.picker.datepicker;\n    this.selected = dates.reduce((selected, timeValue) => {\n      const date = new Date(timeValue);\n      const year = date.getFullYear();\n      const month = date.getMonth();\n      if (selected[year] === undefined) {\n        selected[year] = [month];\n      } else {\n        pushUnique(selected[year], month);\n      }\n      return selected;\n    }, {});\n    if (rangepicker && rangepicker.dates) {\n      this.range = rangepicker.dates.map(timeValue => {\n        const date = new Date(timeValue);\n        return isNaN(date) ? undefined : [date.getFullYear(), date.getMonth()];\n      });\n    }\n  }\n\n  // Update the entire view UI\n  render() {\n    // refresh disabled months on every render in order to clear the ones added\n    // by beforeShow hook at previous render\n    // this.disabled = [...this.datesDisabled];\n    this.disabled = this.datesDisabled.reduce((arr, disabled) => {\n      const dt = new Date(disabled);\n      if (this.year === dt.getFullYear()) {\n        arr.push(dt.getMonth());\n      }\n      return arr;\n    }, []);\n\n    this.picker.setViewSwitchLabel(this.year);\n    this.picker.setPrevBtnDisabled(this.year <= this.minYear);\n    this.picker.setNextBtnDisabled(this.year >= this.maxYear);\n\n    const selected = this.selected[this.year] || [];\n    const yrOutOfRange = this.year < this.minYear || this.year > this.maxYear;\n    const isMinYear = this.year === this.minYear;\n    const isMaxYear = this.year === this.maxYear;\n    const range = computeMonthRange(this.range, this.year);\n\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      const date = dateValue(this.year, index, 1);\n\n      el.className = `datepicker-cell ${this.cellClass}`;\n      if (this.isMinView) {\n        el.dataset.date = date;\n      }\n      // reset text on every render to clear the custom content set\n      // by beforeShow hook at previous render\n      el.textContent = this.monthNames[index];\n\n      if (\n        yrOutOfRange\n        || isMinYear && index < this.minMonth\n        || isMaxYear && index > this.maxMonth\n        || this.disabled.includes(index)\n      ) {\n        classList.add('disabled');\n      }\n      if (range) {\n        const [rangeStart, rangeEnd] = range;\n        if (index > rangeStart && index < rangeEnd) {\n          classList.add('range');\n        }\n        if (index === rangeStart) {\n          classList.add('range-start');\n        }\n        if (index === rangeEnd) {\n          classList.add('range-end');\n        }\n      }\n      if (selected.includes(index)) {\n        classList.add('selected');\n      }\n      if (index === this.focused) {\n        classList.add('focused');\n      }\n\n      if (this.beforeShow) {\n        this.performBeforeHook(el, index, date);\n      }\n    });\n  }\n\n  // Update the view UI by applying the changes of selected and focused items\n  refresh() {\n    const selected = this.selected[this.year] || [];\n    const [rangeStart, rangeEnd] = computeMonthRange(this.range, this.year) || [];\n    this.grid\n      .querySelectorAll('.range, .range-start, .range-end, .selected, .focused')\n      .forEach((el) => {\n        el.classList.remove('range', 'range-start', 'range-end', 'selected', 'focused');\n      });\n    Array.from(this.grid.children).forEach((el, index) => {\n      const classList = el.classList;\n      if (index > rangeStart && index < rangeEnd) {\n        classList.add('range');\n      }\n      if (index === rangeStart) {\n        classList.add('range-start');\n      }\n      if (index === rangeEnd) {\n        classList.add('range-end');\n      }\n      if (selected.includes(index)) {\n        classList.add('selected');\n      }\n      if (index === this.focused) {\n        classList.add('focused');\n      }\n    });\n  }\n\n  // Update the view UI by applying the change of focused item\n  refreshFocus() {\n    this.grid.querySelectorAll('.focused').forEach((el) => {\n      el.classList.remove('focused');\n    });\n    this.grid.children[this.focused].classList.add('focused');\n  }\n}"]},"metadata":{},"sourceType":"module"}