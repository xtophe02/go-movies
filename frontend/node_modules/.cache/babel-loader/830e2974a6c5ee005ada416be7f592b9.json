{"ast":null,"code":"import Component from './utils/component';\nimport { cloneAttributes } from './utils/dom';\nimport { isString, BooleanParse, isObject, isPromise, isFunction } from './utils/type';\nimport defaultOptions from './defaultOptions';\nimport tagTemplate from './templates/tag';\nimport containerTemplate from './templates/wrapper';\nimport dropdownItemTemplate from './templates/dropdown-item'; // TODO: add pattern or function to valdiate value before adding\n\nexport default class BulmaTagsInput extends Component {\n  constructor(element) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(element, options, defaultOptions); // Convert Boolean string options to full Boolean\n\n    this.options.allowDuplicates = BooleanParse(this.options.allowDuplicates);\n    this.options.caseSensitive = BooleanParse(this.options.caseSensitive);\n    this.options.clearSelectionOnTyping = BooleanParse(this.options.clearSelectionOnTyping);\n    this.options.closeDropdownOnItemSelect = BooleanParse(this.options.closeDropdownOnItemSelect);\n    this.options.freeInput = BooleanParse(this.options.freeInput);\n    this.options.highlightDuplicate = BooleanParse(this.options.highlightDuplicate);\n    this.options.highlightMatchesString = BooleanParse(this.options.highlightMatchesString);\n    this.options.removable = BooleanParse(this.options.removable);\n    this.options.searchOn = this.options.searchOn.toLowerCase();\n    this.options.selectable = BooleanParse(this.options.selectable);\n    this.options.trim = BooleanParse(this.options.trim); //Bind events to current class\n\n    this._onDocumentClick = this._onDocumentClick.bind(this);\n    this._onInputChange = this._onInputChange.bind(this);\n    this._onInputClick = this._onInputClick.bind(this);\n    this._onInputFocusOut = this._onInputFocusOut.bind(this);\n    this._onInputFocusIn = this._onInputFocusIn.bind(this);\n    this._onInputKeyDown = this._onInputKeyDown.bind(this);\n    this._onInputKeyPress = this._onInputKeyPress.bind(this);\n    this._onOriginalInputChange = this._onOriginalInputChange.bind(this);\n    this._onTagDeleteClick = this._onTagDeleteClick.bind(this);\n    this._onTagClick = this._onTagClick.bind(this);\n    this._onDropdownItemClick = this._onDropdownItemClick.bind(this); // Define internal variables\n\n    this.items = [];\n    this._selected = -1; // index of selected item\n    // Initiate plugin\n\n    this._init();\n  }\n  /**\n   * Initiate all DOM element corresponding to selector\n   * @method\n   * @return {Array} Array of all Plugin instances\n   */\n\n\n  static attach() {\n    let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'input[data-type=\"tags\"], input[type=\"tags\"], select[data-type=\"tags\"], select[type=\"tags\"]';\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let container = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    return super.attach(selector, options, container);\n  }\n  /**\n   * Initiate plugin\n   * @method init\n   * @return {void}\n   */\n\n\n  _init() {\n    // Detect if original input was a Select element\n    this._isSelect = this.element.tagName === 'SELECT';\n    this._isMultiple = this._isSelect && this.element.hasAttribute('multiple'); // Detect if we work with Object items or not\n    // Object Items is forced when working with select element\n\n    this._objectItems = typeof this.options.itemValue !== 'undefined' || this._isSelect;\n    this.options.itemValue = this.options.itemValue ? this.options.itemValue : this._isSelect ? 'value' : undefined;\n    this.options.itemText = this.options.itemText ? this.options.itemText : this._isSelect ? 'text' : undefined; // If no itemText pass then use itemValue as itemText\n\n    if (typeof this.options.itemText === 'undefined') {\n      this.options.itemText = this.options.itemValue;\n    } // Force freeInput to False if working with object items\n\n\n    this.options.freeInput = this._objectItems ? false : this.options.freeInput; // Init search engine\n\n    this.source = null;\n\n    if (typeof this.options.source !== 'undefined') {\n      // Fix searchOn option if wrong\n      if (!['value', 'text'].includes(this.options.searchOn)) {\n        this.options.searchOn = defaultOptions.searchOn;\n      }\n\n      if (isPromise(this.options.source)) {\n        this.source = this.options.source;\n      } else if (isFunction(this.options.source)) {\n        this.source = value => Promise.resolve(this.options.source(value));\n      } else if (Array.isArray(this.options.source)) {\n        this.source = value => Promise.resolve(this.options.source.filter(i => {\n          const val = this._objectItems ? i[this.options.itemValue] : i;\n          return this.options.caseSensitive ? val.includes(value) : val.toLowerCase().includes(value.toLowerCase());\n        }));\n      }\n    } // Determine allowed input modes\n\n\n    this._manualInputAllowed = !this._isSelect && this.options.freeInput;\n    this._filterInputAllowed = this._isSelect || this.source;\n\n    this._build();\n  }\n  /**\n   * Build TagsInput DOM elements\n   */\n\n\n  _build() {\n    // Create TagsInput DOM\n    const containerFragment = document.createRange().createContextualFragment(containerTemplate({\n      emptyTitle: typeof this.options.noResultsLabel !== 'undefined' ? this.options.noResultsLabel : 'No results found',\n      placeholder: this.element.placeholder ? this.element.placeholder : this.options.placeholder,\n      uuid: this.id\n    }));\n    this.container = containerFragment.firstElementChild;\n    this.input = this.container.querySelector('input');\n    this.dropdown = this.container.querySelector(`#${this.id}-list .dropdown-content`);\n    this.dropdownEmptyOption = this.dropdown.querySelector('.empty-title'); // Clone attributes between original and new input\n\n    cloneAttributes(this.input, this.element, 'data-type multiple name type value');\n\n    if (this.element.disabled) {\n      this.container.setAttribute('disabled', 'disabled');\n      this.options.removable = false;\n      this.options.selectable = false;\n    } // Propagate original input disabled attribute to the container\n\n\n    if (this.input.getAttribute('disabled') || this.input.classList.contains('is-disabled')) {\n      this.container.setAttribute('disabled', 'disabled');\n    }\n\n    if (!this._manualInputAllowed) {\n      this.container.classList.add(this._filterInputAllowed ? 'is-filter' : 'no-input');\n    } // Remove dropdown if no source or original input is not a select element\n\n\n    if (!this._isSelect && typeof this.options.source === 'undefined') {\n      this.dropdown.remove();\n      this.dropdown = null;\n      this.input.setAttribute('list', null);\n    } // Initialize plugin value from original input value\n\n\n    if (this._isSelect) {\n      Array.from(this.element.options).forEach(option => {\n        if (option.selected) {\n          // HTML Option element contains value and text properties\n          // Add it silently to not propagate to the original element\n          this.add(option.value ? option : {\n            value: option.text,\n            text: option.text\n          }, true);\n        }\n\n        this._createDropdownItem(option);\n      });\n    } else {\n      // We have on input element\n      if (this.element.value.length) {\n        this.add(this._objectItems ? JSON.parse(this.element.value) : this.element.value, true);\n      }\n    }\n\n    this._bindEvents(); // Insert container right before original input and make original input hidden\n\n\n    this.element.parentNode.insertBefore(this.container, this.element); // Hide original input (type=\"hidden\" only works on select)\n\n    this.element.style.display = 'none';\n  }\n  /**\n   * Bind all events listener\n   */\n\n\n  _bindEvents() {\n    // Bind document click event to close dropdown\n    document.addEventListener('click', this._onDocumentClick); // Bind event handlers to orginal input\n\n    this.element.addEventListener('change', this._onOriginalInputChange); // Bind event handlers to internal input\n\n    this.input.addEventListener('input', this._onInputChange);\n    this.input.addEventListener('click', this._onInputClick);\n    this.input.addEventListener('keydown', this._onInputKeyDown);\n    this.input.addEventListener('keypress', this._onInputKeyPress);\n    this.input.addEventListener('focusout', this._onInputFocusOut);\n    this.input.addEventListener('focusin', this._onInputFocusIn);\n  }\n  /**\n   * Check if caret is at the beginning of the input value\n   */\n\n\n  _caretAtStart() {\n    try {\n      return this.input.selectionStart === 0 && this.input.selectionEnd === 0;\n    } catch (e) {\n      return this.input.value === '';\n    }\n  }\n  /**\n   * Check value length constraint if option activated\n   * @param {string|object} item \n   */\n\n\n  _checkLength(item) {\n    const value = this._objectItems ? item[this.options.itemValue] : item;\n\n    if (!isString(value)) {\n      return true;\n    }\n\n    return value.length >= this.options.minChars && (typeof this.options.maxChars === 'undefined' || value.length <= this.options.maxChars);\n  }\n  /**\n   * Close dropdown\n   */\n\n\n  _closeDropdown() {\n    if (this.dropdown) {\n      this.emit('before.dropdown.close', this);\n      this.container.classList.remove('is-active');\n      this.emit('after.dropdown.close', this);\n    }\n  }\n  /**\n   * Create a new dropdown item based on given item data\n   * @param {String|Object} item \n   */\n\n\n  _createDropdownItem(item) {\n    if (this.dropdown) {\n      // TODO: add possibility to provide template through options\n      const dropdownItemFragment = document.createRange().createContextualFragment(dropdownItemTemplate({\n        text: item.text,\n        value: item.value\n      }));\n      const dropdownItem = dropdownItemFragment.firstElementChild; // Save item data into dataset\n\n      dropdownItem.dataset.value = item.value;\n      dropdownItem.dataset.text = item.text;\n      dropdownItem.addEventListener('click', this._onDropdownItemClick);\n      this.dropdown.append(dropdownItem);\n    }\n  }\n  /**\n   * Create a new tag and add it to the DOM\n   * @param string value \n   */\n\n\n  _createTag(item) {\n    const tagFragment = document.createRange().createContextualFragment(tagTemplate({\n      removable: this.options.removable,\n      style: this.options.tagClass,\n      text: item.text,\n      value: item.value\n    }));\n    const tag = tagFragment.firstElementChild; // Attach tag click event to select it\n\n    tag.addEventListener('click', this._onTagClick);\n\n    if (this.options.removable) {\n      // Find delete button and attach click event\n      const deleteButton = tag.querySelector('.delete');\n\n      if (deleteButton) {\n        deleteButton.addEventListener('click', this._onTagDeleteClick);\n      }\n    } // insert new tag at the end (ie just before input)\n\n\n    this.container.insertBefore(tag, this.input);\n  }\n  /**\n   * Remove all dropdown items except the empty title\n   */\n\n\n  _emptyDropdown() {\n    if (this.dropdown) {\n      Array.from(this.dropdown.children).filter(child => !child.classList.contains('empty-title')).forEach(child => {\n        child.remove();\n      });\n    }\n  }\n  /**\n   * Find needle into a string and wrap it with <mark> HTML tag\n   * @param {String} string \n   * @param {String} needle \n   */\n\n\n  _highlightMatchesInString(string, needle) {\n    const reg = \"(\" + needle + \")(?![^<]*>|[^<>]*</)\"; // explanation: http://stackoverflow.com/a/18622606/1147859\n\n    const regex = new RegExp(reg, \"i\"); // If the regex doesn't match the string just return initial string\n\n    if (!string.match(regex)) {\n      return string;\n    } // Otherwise, get to highlighting\n\n\n    const matchStartPosition = string.match(regex).index;\n    const matchEndPosition = matchStartPosition + string.match(regex)[0].toString().length;\n    const originalTextFoundByRegex = string.substring(matchStartPosition, matchEndPosition);\n    string = string.replace(regex, `<mark class=\"is-highlighted\">${originalTextFoundByRegex}</mark>`);\n    return string;\n  }\n  /**\n   * Open dropdown\n   */\n\n\n  _openDropdown() {\n    if (this.dropdown) {\n      this.container.classList.add('is-active');\n    }\n  }\n  /**\n   * Propagate internal input changes to the original input\n   */\n\n\n  _propagateChange() {\n    if (!this._isSelect) {\n      // If original element is an input element\n      this.element.value = this.value;\n    } else {\n      // If original element is a select element\n      Array.from(this.element.options).forEach(option => {\n        option.setAttribute('selected', undefined);\n        option.selected = false; // If option has been added by TagsInput then we remove it\n        // Otherwise it is an original option\n\n        if (typeof option.dataset.source !== 'undefined') {\n          option.remove();\n        }\n      }); // Update original element options selected attributes\n\n      this.items.forEach(item => {\n        this._updateSelectOptions({\n          value: this._objectItems ? item[this.options.itemValue] : item,\n          text: this._objectItems ? item[this.options.itemText] : item\n        });\n      });\n    } // Trigger Change event manually (because original input is now hidden)\n    // Trick: Passes current class constructor name to prevent loop with _onOriginalInputChange handler)\n\n\n    const changeEvent = new CustomEvent('change', {\n      'detail': this.constructor.name\n    });\n    this.element.dispatchEvent(changeEvent);\n  }\n  /**\n   * Trim value if option activated\n   * @param {string|object} item \n   */\n\n\n  _trim(item) {\n    if (this.options.trim) {\n      if (this._objectItems) {\n        if (isString(item[this.options.itemValue])) {\n          item[this.options.itemValue] = item[this.options.itemValue].trim();\n        }\n\n        if (isString(item[this.options.itemText])) {\n          item[this.options.itemText] = item[this.options.itemText].trim();\n        }\n      } else {\n        item = item.trim();\n      }\n    }\n\n    return item;\n  }\n  /**\n   * Filter Dropdown items to be compliant with already selected items and current input value\n   * Filtering is made on Text by default (can be changed with option)\n   */\n\n\n  _filterDropdownItems() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    if (this.dropdown) {\n      if (this.emit('before.dropdown.filter', this)) {\n        Array.from(this.dropdown.children).filter(child => !child.classList.contains('empty-title')).forEach(child => {\n          const childValue = child.dataset[this.options.searchOn]; // Remove highlights\n\n          if (this.options.highlightMatchesString) {\n            child.textContent = child.textContent.replace(/<\\/?(mark\\s?(class=\"is\\-highlighted\")?)?>]*>?/gm, '');\n          } // If value is found in dropdown\n\n\n          if (value && value.length) {\n            if (this.options.caseSensitive) {\n              child.style.display = childValue.includes(value) ? 'block' : 'none';\n            } else {\n              child.style.display = childValue.toLowerCase().includes(value.toLowerCase()) ? 'block' : 'none';\n            }\n\n            if (this.options.highlightMatchesString) {\n              child.innerHTML = this._highlightMatchesInString(child.innerHTML, value);\n            }\n          } else {\n            child.style.display = 'block';\n          }\n\n          if (!this.options.allowDuplicates || this._isSelect && !this._isMultiple) {\n            const hasValue = this.options.searchOn === 'value' ? this.hasValue(childValue) : this.hasText(childValue);\n            child.style.display = hasValue ? 'none' : child.style.display;\n          }\n        });\n        const hasActiveItems = Array.from(this.dropdown.children).filter(child => !child.classList.contains('empty-title')).some(child => child.style.display !== 'none');\n\n        if (hasActiveItems) {\n          this.dropdownEmptyOption.style.display = 'none';\n        } else {\n          this.dropdownEmptyOption.style.display = 'block';\n        }\n\n        this.emit('after.dropdown.filter', this);\n        return hasActiveItems;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Update original select option based on given item\n   * @param {String|Object} item \n   */\n\n\n  _updateSelectOptions(item) {\n    if (this._isSelect) {\n      // Check to see if the tag exists in its raw or uri-encoded form\n      let option = this.element.querySelector(`option[value=\"${encodeURIComponent(item.value)}\"]`) || this.element.querySelector(`option[value=\"${item.value}\"]`); // add <option /> if item represents a value not present in one of the <select />'s options\n\n      if (!option) {\n        const optionFragment = document.createRange().createContextualFragment(`<option value=\"${item.value}\" data-source=\"${this.id}\" selected>${item.text}</option>`);\n        option = optionFragment.firstElementChild;\n        this.element.add(option);\n      } // mark option as selected\n\n\n      option.setAttribute('selected', 'selected');\n      option.selected = true;\n    }\n  }\n  /**\n   * Add given item\n   * item = 'john'\n   * item = 'john,jane'\n   * item = ['john', 'jane']\n   * item = [{\n   *  \"value\": \"1\",\n   *  \"text\": \"John\"\n   * }, {\n   *  \"value\": \"2\",\n   *  \"text\": \"Jane\"\n   * }]\n   * @param {String|Object} item \n   * @param {Boolean} silently Should the change be propagated to the original element\n   */\n\n\n  add(items) {\n    let silently = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    // Check if number of items is limited ans reached\n    if (typeof this.options.maxTags !== 'undefined' && this.items.length >= this.options.maxTags) {\n      return this;\n    } // Make sure to work with an array of items\n\n\n    items = Array.isArray(items) ? items : isObject(items) ? [items] : items.split(this.options.delimiter); // If string items are expected then check every item is a string\n\n    if (!this._objectItems && items.filter(item => isString(item)).length !== items.length) {\n      throw 'Item must be a string or an array of strings';\n    } // If object items are expected then check every item is an object\n\n\n    if (this._objectItems && items.filter(item => isObject(item)).length !== items.length) {\n      throw 'Item must be an object or an array of objects';\n    }\n\n    items.forEach(item => {\n      item = this._trim(item); // Check if item respects min/max chars\n\n      if (this._checkLength(item)) {\n        // If original input is a non multiple select element\n        if (this._isSelect && !this._isMultiple && this.items.length > 0) {\n          this.removeAtIndex(0);\n          this.element.remove(this.element.selectedIndex);\n        } // check if duplicates are allowed or not\n\n\n        if (item = this.emit('before.add', item)) {\n          if (this.options.allowDuplicates || !this.has(item)) {\n            const itemData = {\n              value: this._objectItems ? item[this.options.itemValue] : item,\n              text: this._objectItems ? item[this.options.itemText] : item\n            };\n\n            const tag = this._createTag(itemData); // save item into the internal array\n\n\n            this.items.push(item);\n\n            if (!silently) {\n              // Propagate change event to the original input\n              this._propagateChange();\n\n              this.emit('after.add', {\n                item,\n                tag\n              });\n            }\n          } else {\n            if (this.options.highlightDuplicate) {\n              const duplicateTag = Array.from(this.container.children).filter(child => child.classList.contains('tag'))[this.indexOf(item)];\n\n              if (duplicateTag) {\n                duplicateTag.classList.add('is-duplicate');\n                setTimeout(() => {\n                  duplicateTag.classList.remove('is-duplicate');\n                }, 1250);\n              }\n            }\n\n            this.emit('item.duplicate', item);\n          }\n        }\n      }\n    });\n    return this;\n  }\n  /**\n   * Unselect the selected item\n   */\n\n\n  clearSelection() {\n    if (this._selected >= 0) {\n      const item = this.items[this._selected];\n\n      const tag = Array.from(this.container.children).filter(child => child.classList.contains('tag'))[this._selected];\n\n      if (this.emit('before.unselect', {\n        item,\n        tag\n      })) {\n        if (tag) {\n          tag.classList.remove('is-selected');\n        }\n\n        this._selected = -1;\n        this.emit('after.unselect', {\n          item,\n          tag\n        });\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Shortcut to removeAll method\n   */\n\n\n  flush() {\n    return this.removeAll();\n  }\n  /**\n   * Sets focus on the input\n   */\n\n\n  focus() {\n    this.container.classList.add('is-focused');\n    this.input.focus();\n    return this;\n  }\n  /**\n   * Check if given item is present\n   * @param {String} item \n   */\n\n\n  has(item) {\n    item = this._trim(item);\n\n    if (this._objectItems) {\n      return this.items.some(i => this.options.caseSensitive || !isString(i[this.options.itemValue]) ? i[this.options.itemValue] === item[this.options.itemValue] : i[this.options.itemValue].toLowerCase() === item[this.options.itemValue].toLowerCase());\n    } else {\n      return this.hasValue(item);\n    }\n  }\n  /**\n   * Check if given text is present\n   * @param {String} value \n   */\n\n\n  hasText(value) {\n    if (this.options.trim) {\n      value = value.trim();\n    }\n\n    return this.items.some(i => {\n      const val = this._objectItems ? i[this.options.itemText] : i;\n      return this.options.caseSensitive ? val === value : val.toLowerCase() === value.toLowerCase();\n    });\n  }\n  /**\n   * Check if given value is present\n   * @param {String} value \n   */\n\n\n  hasValue(value) {\n    if (this.options.trim) {\n      value = value.trim();\n    }\n\n    return this.items.some(i => {\n      const val = this._objectItems ? i[this.options.itemValue] : i;\n      return this.options.caseSensitive ? val === value : val.toLowerCase() === value.toLowerCase();\n    });\n  }\n  /**\n   * Get index of given item\n   * @param {string} item \n   */\n\n\n  indexOf(item) {\n    item = this._trim(item);\n\n    if (this._objectItems) {\n      if (!isObject(item)) {\n        throw 'Item must be an object';\n      }\n\n      return this.items.map(function (e) {\n        return e.value;\n      }).indexOf(item.value);\n    } else {\n      return this.items.indexOf(item);\n    }\n  }\n  /**\n   * Returns the internal input element\n   */\n\n\n  input() {\n    return this.input;\n  }\n  /**\n   * Get items\n   */\n\n\n  items() {\n    return this.items;\n  }\n  /**\n   * Remove given item\n   * item = 'john'\n   * item = 'john,jane'\n   * @param String item \n   */\n\n\n  remove(items) {\n    if (this.options.removable) {\n      // Make sure to work with an array of items\n      items = Array.isArray(items) ? items : isObject(items) ? [items] : items.split(this.options.delimiter); // If string items are expected then check every item is a string\n\n      if (!this._objectItems && items.filter(item => isString(item)).length !== items.length) {\n        throw 'Item must be a string or an array of strings';\n      } // If object items are expected then check every item is an object\n\n\n      if (this._objectItems && items.filter(item => isObject(item)).length !== items.length) {\n        throw 'Item must be an object or an array of objects';\n      }\n\n      items.forEach(item => {\n        let index = this.indexOf(item);\n\n        while (index >= 0) {\n          this.removeAtIndex(index);\n          index = this.indexOf(item);\n        }\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Remove all tags at once\n   */\n\n\n  removeAll() {\n    if (this.options.removable) {\n      if (this.emit('before.flush', this.items)) {\n        this.clearSelection();\n        Array.from(this.container.children).filter(child => child.classList.contains('tag')).forEach(tag => tag.remove());\n        this.items = [];\n\n        this._filterDropdownItems();\n\n        this._propagateChange();\n\n        this.emit('after.flush', this.items);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Remove item at given index\n   * @param Integer index \n   */\n\n\n  removeAtIndex(index) {\n    let clearSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (this.options.removable && !isNaN(index) && index >= 0 && index < this.items.length) {\n      const tag = Array.from(this.container.children).filter(child => child.classList.contains('tag'))[index];\n      const item = this.items[index];\n\n      if (this.emit('before.remove', item)) {\n        if (clearSelection) {\n          this.clearSelection();\n        }\n\n        if (tag) {\n          tag.remove();\n        } // If original input is a select element\n        // then deselect related option\n\n\n        if (this._isSelect) {\n          this.element.options[index].selected = false;\n        }\n\n        if (this._selected == index) {\n          this._selected = -1;\n        } else if (this._selected >= 0) {\n          // One item less so selected index is \n          this._selected -= 1;\n        }\n\n        this.items.splice(index, 1);\n\n        this._filterDropdownItems();\n\n        this._propagateChange();\n\n        this.emit('after.remove', item);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Select given item\n   * @param {string} item \n   */\n\n\n  select(items) {\n    if (this.options.selectable) {\n      // Make sure to work with an array of items\n      items = Array.isArray(items) ? items : isObject(items) ? [items] : items.split(this.options.delimiter); // If string items are expected then check every item is a string\n\n      if (!this._objectItems && items.filter(item => isString(item)).length !== items.length) {\n        throw 'Item must be a string or an array of strings';\n      } // If object items are expected then check every item is an object\n\n\n      if (this._objectItems && items.filter(item => isObject(item)).length !== items.length) {\n        throw 'Item must be an object or an array of objects';\n      }\n\n      items.forEach(item => {\n        this.selectAtIndex(this.indexOf(item));\n      });\n    }\n\n    return this;\n  }\n  /**\n   * Select tag at given index\n   * @param Integer index \n   */\n\n\n  selectAtIndex(index) {\n    if (this.options.selectable) {\n      // Clear selection\n      this.clearSelection();\n\n      if (!isNaN(index) && index >= 0 && index < this.items.length) {\n        const tag = Array.from(this.container.children).filter(child => child.classList.contains('tag'))[index];\n        const item = this.items[index];\n\n        if (this.emit('before.select', {\n          item,\n          tag\n        })) {\n          if (tag) {\n            tag.classList.add('is-selected');\n          }\n\n          this._selected = index;\n          this.emit('after.select', {\n            item,\n            tag\n          });\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Get selected item\n   */\n\n\n  get selected() {\n    if (this._selected >= 0) {\n      return this.items[this._selected];\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Get selected item index\n   */\n\n\n  get selectedIndex() {\n    return this._selected;\n  }\n  /**\n   * Get value\n   */\n\n\n  get value() {\n    if (!this._isSelect) {\n      if (this._objectItems) {\n        return this.items.map(item => item.value).join(this.options.delimiter);\n      } else {\n        return this.items.join(this.options.delimiter);\n      }\n    } else {\n      return Array.from(this.element.options).filter(option => option.selected).map(option => option.value);\n    }\n  }\n  /**\n   * Set value\n   */\n\n\n  set value(string) {\n    this.removeAll();\n    this.add(string);\n  }\n  /**\n   * Document click event handler\n   * @param {Event} e \n   */\n\n\n  _onDocumentClick(e) {\n    if (this.dropdown) {\n      // If we click on element inside container then do nothing\n      if (this.container.contains(e.target)) {\n        return;\n      } // Tag and delete button already deleted when event triggered\n      // So we check if target is a tag delete button\n\n\n      if (e.target.dataset.tag && e.target.dataset.tag === 'delete') {\n        return;\n      } // Click outside dropdown so close it\n\n\n      this._closeDropdown();\n    }\n  }\n  /**\n   * Input focus lost event handler\n   * @param {Event} e \n   */\n\n\n  _onDropdownItemClick(e) {\n    e.preventDefault();\n\n    if (this.dropdown) {\n      if (this._objectItems) {\n        let item = {};\n        item[this.options.itemText] = e.currentTarget.dataset.text;\n        item[this.options.itemValue] = e.currentTarget.dataset.value;\n        this.add(item);\n      } else {\n        this.add(e.currentTarget.dataset.value);\n      }\n\n      this._filterDropdownItems();\n\n      this.input.value = '';\n      this.input.focus();\n\n      if (this.options.closeDropdownOnItemSelect) {\n        this._closeDropdown();\n      }\n    }\n  }\n  /**\n   * Input change event handler\n   * @param {Event} e \n   */\n\n\n  _onInputChange(e) {\n    this._filterDropdownItems(this.input.value);\n  }\n  /**\n   * Input click event handler\n   * @param {Event} e \n   */\n\n\n  _onInputClick(e) {\n    e.preventDefault();\n\n    if (!this.source || this.input.value.length >= this.options.searchMinChars) {\n      this._openDropdown();\n\n      this._filterDropdownItems();\n    }\n  }\n  /**\n   * Input focus event handler\n   * \n   * @param {Event} e \n   */\n\n\n  _onInputFocusIn(e) {\n    e.preventDefault();\n\n    if (this.container.getAttribute('disabled') !== null || this.container.classList.contains('is-disabled')) {\n      this.input.blur();\n      return false;\n    }\n\n    this.container.classList.add('is-focused');\n  }\n  /**\n   * Input focus lost event handler\n   * @param {Event} e \n   */\n\n\n  _onInputFocusOut(e) {\n    e.preventDefault();\n    this.container.classList.remove('is-focused');\n  }\n  /**\n   * Input Keydown event handler\n   * \n   * @param {Event} e \n   */\n\n\n  _onInputKeyDown(e) {\n    const key = e.charCode || e.keyCode || e.which;\n\n    switch (key) {\n      // BACKSPACE\n      case 8:\n        if (this.options.removable) {\n          if (this._caretAtStart() && this._selected >= 0) {\n            const currentItemIndex = this._selected; // If tag was selected then select next (or previous if next does not exists)\n\n            if (currentItemIndex >= 0) {\n              this.selectAtIndex(currentItemIndex + 1 < this.items.length ? currentItemIndex + 1 : currentItemIndex - 1);\n            }\n\n            this.removeAtIndex(currentItemIndex, false);\n          }\n        }\n\n        if (this.source && this.input.value.length < this.options.searchMinChars) {\n          this._closeDropdown();\n        }\n\n        break;\n      // ESCAPE\n\n      case 27:\n        if (this._selected >= 0) {\n          this.clearSelection();\n        }\n\n        this._closeDropdown();\n\n        break;\n      // DELETE\n\n      case 46:\n        if (this.options.removable) {\n          if (this._caretAtStart() && this._selected >= 0) {\n            const currentItemIndex = this._selected; // If tag was selected then select next (or previous if next does not exists)\n\n            if (currentItemIndex >= 0) {\n              this.selectAtIndex(currentItemIndex + 1 < this.items.length ? currentItemIndex + 1 : currentItemIndex - 1);\n            }\n\n            this.removeAtIndex(currentItemIndex, false);\n          }\n        }\n\n        if (this.source && this.input.value.length < this.options.searchMinChars) {\n          this._closeDropdown();\n        }\n\n        break;\n      // LEFT ARROW\n\n      case 37:\n        if (!this.input.value.length) {\n          if (this._selected < 0) {\n            this.selectAtIndex(this.items.length - 1);\n          } else {\n            this.selectAtIndex(this._selected - 1 >= 0 ? this._selected - 1 : this.items.length - 1);\n          }\n        }\n\n        break;\n      // RIGHT ARROW\n\n      case 39:\n        if (!this.input.value.length) {\n          if (this._selected < 0) {\n            this.selectAtIndex(0);\n          } else {\n            this.selectAtIndex(this._selected + 1 >= this.items.length ? 0 : this._selected + 1);\n          }\n        }\n\n        break;\n\n      default:\n        if (this.options.clearSelectionOnTyping) {\n          this.clearSelection();\n        }\n\n      // ignore\n    }\n  }\n  /**\n   * Input Keypress event handler\n   * \n   * @param {Event} e \n   */\n\n\n  _onInputKeyPress(e) {\n    const key = e.charCode || e.keyCode || e.which;\n    let value = this._trim(this.input.value) + String.fromCharCode(key);\n\n    if (!this._manualInputAllowed && !this._filterInputAllowed) {\n      e.preventDefault();\n      return false;\n    } // ENTER\n\n\n    if (!value.length && key !== 13) {\n      return false;\n    }\n\n    if (this._filterInputAllowed) {\n      this._filterDropdownItems(value);\n    }\n\n    if (this._filterInputAllowed && this.source && value.length >= this.options.searchMinChars && key !== 13) {\n      this._openDropdown();\n\n      this.dropdown.classList.add('is-loading');\n\n      this._emptyDropdown();\n\n      this.source(value).then(results => {\n        results = this.emit('on.results.received', results);\n\n        if (results.length) {\n          results.forEach(result => {\n            let item = {\n              value: null,\n              text: null\n            };\n\n            if (!isObject(result)) {\n              item.value = result;\n              item.text = result;\n            } else {\n              item.value = result[this.options.itemValue];\n              item.text = result[this.options.itemText];\n            }\n\n            this._createDropdownItem(item);\n          });\n        }\n\n        this._filterDropdownItems(value);\n\n        this.dropdown.classList.remove('is-loading');\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    if (this._manualInputAllowed && (value.includes(this.options.delimiter) || key == 13)) {\n      // Prevent default behavior (ie: add char into input value)\n      e.preventDefault(); // Split value by delimiter in case we copy/paste multiple values\n\n      const values = value.split(this.options.delimiter);\n      values.forEach(value => {\n        // check if empty text when delimiter is removed\n        if ((value = value.replace(this.options.delimiter, '')) != '') {\n          // push to array and remove delimiter\n          this.add(value);\n        }\n      });\n      value = ''; // clear input\n\n      this.input.value = '';\n\n      this._closeDropdown();\n\n      return false;\n    }\n  }\n  /**\n   * Original input change event handler\n   * CAUTION: because original input is now hidden the change event must be triggered manually on change\n   * Example how to trigger change event manually\n   * var changeEvent = new Event('change');\n   * input.dispatchEvent(changeEvent);\n   * \n   * @param {Event} e \n   */\n\n\n  _onOriginalInputChange(e) {\n    if (!e.detail || isString(e.detail) && e.detail !== this.constructor.name) {\n      this.value = e.currentTarget.value;\n    }\n  }\n  /**\n   * Tag click event handler\n   * \n   * @param {Event} e \n   */\n\n\n  _onTagClick(e) {\n    e.preventDefault();\n\n    if (e.currentTarget.classList.contains('delete')) {\n      return false;\n    }\n\n    if (this.container.getAttribute('disabled') !== null || this.container.classList.contains('is-disabled')) {\n      return false;\n    }\n\n    this.input.focus();\n\n    if (this.options.selectable) {\n      const tag = e.currentTarget.closest('.tag');\n\n      if (tag) {\n        const tagIndex = Array.from(this.container.children).indexOf(tag);\n\n        if (tagIndex === this._selected) {\n          this.clearSelection();\n        } else {\n          this.selectAtIndex(tagIndex);\n        }\n      }\n    }\n  }\n  /**\n   * Delete tag button click event handler\n   * \n   * @param {Event} e \n   */\n\n\n  _onTagDeleteClick(e) {\n    e.preventDefault();\n\n    if (this.container.getAttribute('disabled') !== null || this.container.classList.contains('is-disabled')) {\n      return false;\n    }\n\n    const tag = e.currentTarget.closest('.tag');\n\n    if (tag) {\n      this.removeAtIndex(Array.from(this.container.children).indexOf(tag));\n    }\n  }\n\n}","map":{"version":3,"sources":["/home/chrismo/Documents/PROJECTS/go-movies/frontend/node_modules/@creativebulma/bulma-tagsinput/src/js/index.js"],"names":["Component","cloneAttributes","isString","BooleanParse","isObject","isPromise","isFunction","defaultOptions","tagTemplate","containerTemplate","dropdownItemTemplate","BulmaTagsInput","constructor","element","options","allowDuplicates","caseSensitive","clearSelectionOnTyping","closeDropdownOnItemSelect","freeInput","highlightDuplicate","highlightMatchesString","removable","searchOn","toLowerCase","selectable","trim","_onDocumentClick","bind","_onInputChange","_onInputClick","_onInputFocusOut","_onInputFocusIn","_onInputKeyDown","_onInputKeyPress","_onOriginalInputChange","_onTagDeleteClick","_onTagClick","_onDropdownItemClick","items","_selected","_init","attach","selector","container","_isSelect","tagName","_isMultiple","hasAttribute","_objectItems","itemValue","undefined","itemText","source","includes","value","Promise","resolve","Array","isArray","filter","i","val","_manualInputAllowed","_filterInputAllowed","_build","containerFragment","document","createRange","createContextualFragment","emptyTitle","noResultsLabel","placeholder","uuid","id","firstElementChild","input","querySelector","dropdown","dropdownEmptyOption","disabled","setAttribute","getAttribute","classList","contains","add","remove","from","forEach","option","selected","text","_createDropdownItem","length","JSON","parse","_bindEvents","parentNode","insertBefore","style","display","addEventListener","_caretAtStart","selectionStart","selectionEnd","e","_checkLength","item","minChars","maxChars","_closeDropdown","emit","dropdownItemFragment","dropdownItem","dataset","append","_createTag","tagFragment","tagClass","tag","deleteButton","_emptyDropdown","children","child","_highlightMatchesInString","string","needle","reg","regex","RegExp","match","matchStartPosition","index","matchEndPosition","toString","originalTextFoundByRegex","substring","replace","_openDropdown","_propagateChange","_updateSelectOptions","changeEvent","CustomEvent","name","dispatchEvent","_trim","_filterDropdownItems","childValue","textContent","innerHTML","hasValue","hasText","hasActiveItems","some","encodeURIComponent","optionFragment","silently","maxTags","split","delimiter","removeAtIndex","selectedIndex","has","itemData","push","duplicateTag","indexOf","setTimeout","clearSelection","flush","removeAll","focus","map","isNaN","splice","select","selectAtIndex","join","target","preventDefault","currentTarget","searchMinChars","blur","key","charCode","keyCode","which","currentItemIndex","String","fromCharCode","then","results","result","catch","error","console","log","values","detail","closest","tagIndex"],"mappings":"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","sourcesContent":["import Component from './utils/component';\nimport { cloneAttributes } from './utils/dom';\nimport { isString, BooleanParse, isObject, isPromise, isFunction } from './utils/type';\nimport defaultOptions from './defaultOptions';\nimport tagTemplate from './templates/tag';\nimport containerTemplate from './templates/wrapper';\nimport dropdownItemTemplate from './templates/dropdown-item';\n\n// TODO: add pattern or function to valdiate value before adding\n\nexport default class BulmaTagsInput extends Component {\n    constructor(element, options = {}) {\n        super(element, options, defaultOptions);\n        \n        // Convert Boolean string options to full Boolean\n        this.options.allowDuplicates = BooleanParse(this.options.allowDuplicates);\n        this.options.caseSensitive = BooleanParse(this.options.caseSensitive);\n        this.options.clearSelectionOnTyping = BooleanParse(this.options.clearSelectionOnTyping);\n        this.options.closeDropdownOnItemSelect = BooleanParse(this.options.closeDropdownOnItemSelect);\n        this.options.freeInput = BooleanParse(this.options.freeInput);\n        this.options.highlightDuplicate = BooleanParse(this.options.highlightDuplicate);\n        this.options.highlightMatchesString = BooleanParse(this.options.highlightMatchesString);\n        this.options.removable = BooleanParse(this.options.removable);\n        this.options.searchOn = this.options.searchOn.toLowerCase();\n        this.options.selectable = BooleanParse(this.options.selectable);\n        this.options.trim = BooleanParse(this.options.trim);\n\n\t\t//Bind events to current class\n\t\tthis._onDocumentClick = this._onDocumentClick.bind(this);\n\t\tthis._onInputChange = this._onInputChange.bind(this);\n\t\tthis._onInputClick = this._onInputClick.bind(this);\n\t\tthis._onInputFocusOut = this._onInputFocusOut.bind(this);\n        this._onInputFocusIn = this._onInputFocusIn.bind(this);\n        this._onInputKeyDown = this._onInputKeyDown.bind(this);\n        this._onInputKeyPress = this._onInputKeyPress.bind(this);\n        this._onOriginalInputChange = this._onOriginalInputChange.bind(this);\n        this._onTagDeleteClick = this._onTagDeleteClick.bind(this);\n        this._onTagClick = this._onTagClick.bind(this);\n        this._onDropdownItemClick = this._onDropdownItemClick.bind(this);\n        \n        // Define internal variables\n        this.items = [];\n        this._selected = -1; // index of selected item\n\n\t\t// Initiate plugin\n\t\tthis._init();\n\t}\n\n\t/**\n\t * Initiate all DOM element corresponding to selector\n\t * @method\n\t * @return {Array} Array of all Plugin instances\n\t */\n\tstatic attach(selector = 'input[data-type=\"tags\"], input[type=\"tags\"], select[data-type=\"tags\"], select[type=\"tags\"]', options = {}, container = null) {\n\t\treturn super.attach(selector, options, container);\n\t}\n\n\t/**\n\t * Initiate plugin\n\t * @method init\n\t * @return {void}\n\t */\n\t_init() {\n        // Detect if original input was a Select element\n        this._isSelect = (this.element.tagName === 'SELECT');\n        this._isMultiple = (this._isSelect && this.element.hasAttribute('multiple'));\n\n        // Detect if we work with Object items or not\n        // Object Items is forced when working with select element\n        this._objectItems = (typeof this.options.itemValue !== 'undefined') || this._isSelect;\n        this.options.itemValue = this.options.itemValue ? this.options.itemValue : (this._isSelect ? 'value' : undefined);\n        this.options.itemText = this.options.itemText ? this.options.itemText : (this._isSelect ? 'text' : undefined);\n        // If no itemText pass then use itemValue as itemText\n        if (typeof this.options.itemText === 'undefined') {\n            this.options.itemText = this.options.itemValue;\n        }\n\n        // Force freeInput to False if working with object items\n        this.options.freeInput = this._objectItems ? false : this.options.freeInput;\n\n        // Init search engine\n        this.source = null;\n        if (typeof this.options.source !== 'undefined') {\n            // Fix searchOn option if wrong\n            if (!['value', 'text'].includes(this.options.searchOn)) {\n                this.options.searchOn = defaultOptions.searchOn;\n            }\n\n            if (isPromise(this.options.source)) {\n                this.source = this.options.source;\n            } else if (isFunction(this.options.source)) {\n                this.source = value => Promise.resolve(this.options.source(value));\n            } else if (Array.isArray(this.options.source)) {\n                this.source = value => Promise.resolve(this.options.source.filter(i => {\n                    const val = (this._objectItems ? i[this.options.itemValue] : i);\n        \n                    return this.options.caseSensitive ? val.includes(value) : val.toLowerCase().includes(value.toLowerCase());\n                }));\n            }\n        }\n\n        // Determine allowed input modes\n        this._manualInputAllowed = !this._isSelect && this.options.freeInput;\n        this._filterInputAllowed = this._isSelect || this.source;\n\n        this._build();\n    }\n\n    /**\n     * Build TagsInput DOM elements\n     */\n    _build() {\n        // Create TagsInput DOM\n        const containerFragment = document.createRange().createContextualFragment(containerTemplate({\n            emptyTitle: typeof this.options.noResultsLabel !== 'undefined' ? this.options.noResultsLabel : 'No results found',\n            placeholder: this.element.placeholder ? this.element.placeholder : this.options.placeholder,\n            uuid: this.id\n        }));\n\n        this.container = containerFragment.firstElementChild;\n        this.input = this.container.querySelector('input');\n        this.dropdown = this.container.querySelector(`#${this.id}-list .dropdown-content`);\n        this.dropdownEmptyOption = this.dropdown.querySelector('.empty-title');\n\n        // Clone attributes between original and new input\n        cloneAttributes(this.input, this.element, 'data-type multiple name type value');\n\n        if (this.element.disabled) {\n            this.container.setAttribute('disabled', 'disabled');\n            this.options.removable = false;\n            this.options.selectable = false;\n        }\n\n        // Propagate original input disabled attribute to the container\n        if (this.input.getAttribute('disabled') || this.input.classList.contains('is-disabled')) {\n            this.container.setAttribute('disabled', 'disabled');\n        }\n\n        if (!this._manualInputAllowed) {\n            this.container.classList.add(this._filterInputAllowed ? 'is-filter' : 'no-input');\n        }\n\n        // Remove dropdown if no source or original input is not a select element\n        if (!this._isSelect && typeof this.options.source === 'undefined') {\n            this.dropdown.remove();\n            this.dropdown = null;\n            this.input.setAttribute('list', null);\n        }\n\n        // Initialize plugin value from original input value\n        if (this._isSelect) {\n            Array.from(this.element.options).forEach(option => {\n                if (option.selected) {\n                    // HTML Option element contains value and text properties\n                    // Add it silently to not propagate to the original element\n                    this.add(option.value ? option : {\n                        value: option.text,\n                        text: option.text\n                    }, true);\n                }\n\n                this._createDropdownItem(option);\n            });\n        } else {\n            // We have on input element\n            if (this.element.value.length) {\n                this.add(this._objectItems ? JSON.parse(this.element.value) : this.element.value, true);\n            }\n        }\n\n        this._bindEvents();\n\n        // Insert container right before original input and make original input hidden\n        this.element.parentNode.insertBefore(this.container, this.element);\n\n        // Hide original input (type=\"hidden\" only works on select)\n        this.element.style.display = 'none';\n    }\n\n    /**\n     * Bind all events listener\n     */\n    _bindEvents() {\n        // Bind document click event to close dropdown\n        document.addEventListener('click', this._onDocumentClick);\n\n        // Bind event handlers to orginal input\n        this.element.addEventListener('change', this._onOriginalInputChange);\n\n        // Bind event handlers to internal input\n        this.input.addEventListener('input', this._onInputChange);\n        this.input.addEventListener('click', this._onInputClick);\n        this.input.addEventListener('keydown', this._onInputKeyDown);\n        this.input.addEventListener('keypress', this._onInputKeyPress);\n        this.input.addEventListener('focusout', this._onInputFocusOut);\n        this.input.addEventListener('focusin', this._onInputFocusIn);\n    }\n\n    /**\n     * Check if caret is at the beginning of the input value\n     */\n    _caretAtStart() {\n\t\ttry {\n\t\t\treturn this.input.selectionStart === 0 && this.input.selectionEnd === 0;\n\t\t} catch(e) {\n\t\t\treturn this.input.value === '';\n\t\t}\n    }\n\n    /**\n     * Check value length constraint if option activated\n     * @param {string|object} item \n     */\n    _checkLength(item) {\n        const value = this._objectItems ? item[this.options.itemValue] : item;\n\n        if (!isString(value)) {\n            return true;\n        }\n\n        return value.length >= this.options.minChars && (typeof this.options.maxChars === 'undefined' || value.length <= this.options.maxChars);\n    }\n\n    /**\n     * Close dropdown\n     */\n    _closeDropdown() {\n        if (this.dropdown) {\n            this.emit('before.dropdown.close', this);\n\n            this.container.classList.remove('is-active');\n\n            this.emit('after.dropdown.close', this);\n        }\n    }\n\n    /**\n     * Create a new dropdown item based on given item data\n     * @param {String|Object} item \n     */\n    _createDropdownItem(item) {\n        if (this.dropdown) {\n            // TODO: add possibility to provide template through options\n            const dropdownItemFragment = document.createRange().createContextualFragment(dropdownItemTemplate({\n                text: item.text,\n                value: item.value\n            }));\n            const dropdownItem = dropdownItemFragment.firstElementChild;\n\n            // Save item data into dataset\n            dropdownItem.dataset.value = item.value;\n            dropdownItem.dataset.text = item.text;\n\n            dropdownItem.addEventListener('click', this._onDropdownItemClick);\n\n            this.dropdown.append(dropdownItem);\n        }\n    }\n\n    /**\n     * Create a new tag and add it to the DOM\n     * @param string value \n     */\n    _createTag(item) {\n        const tagFragment = document.createRange().createContextualFragment(tagTemplate({\n            removable: this.options.removable,\n            style: this.options.tagClass,\n            text: item.text,\n            value: item.value\n        }));\n        const tag = tagFragment.firstElementChild;\n\n        // Attach tag click event to select it\n        tag.addEventListener('click', this._onTagClick);\n\n        if (this.options.removable) {\n            // Find delete button and attach click event\n            const deleteButton = tag.querySelector('.delete');\n            if (deleteButton) {\n                deleteButton.addEventListener('click', this._onTagDeleteClick);\n            }\n        }\n\n        // insert new tag at the end (ie just before input)\n        this.container.insertBefore(tag, this.input);\n    }\n\n    /**\n     * Remove all dropdown items except the empty title\n     */\n    _emptyDropdown() {\n        if (this.dropdown) {\n            Array.from(this.dropdown.children).filter(child => !child.classList.contains('empty-title')).forEach(child => {\n                child.remove();\n            });\n        }\n    }\n\n    /**\n     * Find needle into a string and wrap it with <mark> HTML tag\n     * @param {String} string \n     * @param {String} needle \n     */\n    _highlightMatchesInString(string, needle) {\n        const reg = \"(\" + needle + \")(?![^<]*>|[^<>]*</)\"; // explanation: http://stackoverflow.com/a/18622606/1147859\n        const regex = new RegExp(reg, \"i\");\n\n        // If the regex doesn't match the string just return initial string\n        if (!string.match(regex)) {\n            return string;\n        }\n\n        // Otherwise, get to highlighting\n        const matchStartPosition = string.match(regex).index;\n        const matchEndPosition = matchStartPosition + string.match(regex)[0].toString().length;\n        const originalTextFoundByRegex = string.substring(matchStartPosition, matchEndPosition);\n        string = string.replace(regex, `<mark class=\"is-highlighted\">${originalTextFoundByRegex}</mark>`);\n\n        return string;\n    }\n\n    /**\n     * Open dropdown\n     */\n    _openDropdown() {\n        if (this.dropdown) {\n            this.container.classList.add('is-active');\n        }\n    }\n\n    /**\n     * Propagate internal input changes to the original input\n     */\n    _propagateChange() {\n        if (!this._isSelect) {\n            // If original element is an input element\n            this.element.value = this.value;\n        } else {\n            // If original element is a select element\n            Array.from(this.element.options).forEach(option => {\n                option.setAttribute('selected', undefined);\n                option.selected = false;\n                \n                // If option has been added by TagsInput then we remove it\n                // Otherwise it is an original option\n                if (typeof option.dataset.source !== 'undefined') {\n                    option.remove();\n                }\n            });\n            \n            // Update original element options selected attributes\n            this.items.forEach(item => {\n                this._updateSelectOptions({\n                    value: this._objectItems ? item[this.options.itemValue] : item,\n                    text: this._objectItems ? item[this.options.itemText] : item\n                });\n            });\n        }\n        \n        // Trigger Change event manually (because original input is now hidden)\n        // Trick: Passes current class constructor name to prevent loop with _onOriginalInputChange handler)\n        const changeEvent = new CustomEvent('change', {\n            'detail': this.constructor.name\n        });\n        this.element.dispatchEvent(changeEvent);\n    }\n\n    /**\n     * Trim value if option activated\n     * @param {string|object} item \n     */\n    _trim(item) {\n        if (this.options.trim) {\n            if (this._objectItems) {\n                if (isString(item[this.options.itemValue])) {\n                    item[this.options.itemValue] = item[this.options.itemValue].trim();\n                }\n\n                if (isString(item[this.options.itemText])) {\n                    item[this.options.itemText] = item[this.options.itemText].trim();\n                }\n            } else {\n                item = item.trim();\n            }\n        }\n\n        return item;\n    }\n\n    /**\n     * Filter Dropdown items to be compliant with already selected items and current input value\n     * Filtering is made on Text by default (can be changed with option)\n     */\n    _filterDropdownItems(value = null) {\n        if (this.dropdown) {\n            if (this.emit('before.dropdown.filter', this)) {\n                Array.from(this.dropdown.children).filter(child => !child.classList.contains('empty-title')).forEach(child => {\n                    const childValue = child.dataset[this.options.searchOn];\n\n                    // Remove highlights\n                    if (this.options.highlightMatchesString) {\n                        child.textContent = child.textContent.replace(/<\\/?(mark\\s?(class=\"is\\-highlighted\")?)?>]*>?/gm, '');\n                    }\n\n                    // If value is found in dropdown\n                    if ((value && value.length)) {\n                        if (this.options.caseSensitive) {\n                            child.style.display = childValue.includes(value) ? 'block' : 'none';\n                        } else {\n                            child.style.display = childValue.toLowerCase().includes(value.toLowerCase()) ? 'block' : 'none';\n                        }\n\n                        if (this.options.highlightMatchesString) {\n                            child.innerHTML = this._highlightMatchesInString(child.innerHTML, value);\n                        }\n                    } else {\n                        child.style.display = 'block';\n                    }\n\n                    if (!this.options.allowDuplicates || (this._isSelect && !this._isMultiple)) {\n                        const hasValue = this.options.searchOn === 'value' ? this.hasValue(childValue) : this.hasText(childValue);\n\n                        child.style.display = hasValue ? 'none' : child.style.display;\n                    }\n                });\n\n                const hasActiveItems = Array.from(this.dropdown.children).filter(child => !child.classList.contains('empty-title')).some(child => child.style.display !== 'none');\n                if (hasActiveItems) {\n                    this.dropdownEmptyOption.style.display = 'none';\n                } else {\n                    this.dropdownEmptyOption.style.display = 'block';\n                }\n\n                this.emit('after.dropdown.filter', this);\n\n                return hasActiveItems;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Update original select option based on given item\n     * @param {String|Object} item \n     */\n    _updateSelectOptions(item) {\n        if (this._isSelect) {\n            // Check to see if the tag exists in its raw or uri-encoded form\n            let option = this.element.querySelector(`option[value=\"${encodeURIComponent(item.value)}\"]`) || this.element.querySelector(`option[value=\"${item.value}\"]`);\n\n            // add <option /> if item represents a value not present in one of the <select />'s options\n            if (!option) {\n                const optionFragment = document.createRange().createContextualFragment(`<option value=\"${item.value}\" data-source=\"${this.id}\" selected>${item.text}</option>`);\n                option = optionFragment.firstElementChild;\n            \n                this.element.add(option);\n            }\n\n            // mark option as selected\n            option.setAttribute('selected', 'selected');\n            option.selected = true;\n        }\n    }\n\n    /**\n     * Add given item\n     * item = 'john'\n     * item = 'john,jane'\n     * item = ['john', 'jane']\n     * item = [{\n     *  \"value\": \"1\",\n     *  \"text\": \"John\"\n     * }, {\n     *  \"value\": \"2\",\n     *  \"text\": \"Jane\"\n     * }]\n     * @param {String|Object} item \n     * @param {Boolean} silently Should the change be propagated to the original element\n     */\n    add(items, silently = false) {\n        // Check if number of items is limited ans reached\n        if (typeof this.options.maxTags !== 'undefined' && this.items.length >= this.options.maxTags) {\n            return this;\n        }\n\n        // Make sure to work with an array of items\n        items = Array.isArray(items) ? items : isObject(items) ? [items] : items.split(this.options.delimiter);\n\n        // If string items are expected then check every item is a string\n        if (!this._objectItems && (items.filter(item => isString(item)).length !== items.length)) {\n            throw('Item must be a string or an array of strings');\n        }\n\n        // If object items are expected then check every item is an object\n        if (this._objectItems && (items.filter(item => isObject(item)).length !== items.length)) {\n            throw('Item must be an object or an array of objects');\n        }\n\n        items.forEach(item => {\n            item = this._trim(item);\n\n            // Check if item respects min/max chars\n            if (this._checkLength(item)) {\n\n                // If original input is a non multiple select element\n                if (this._isSelect && !this._isMultiple && this.items.length > 0) {\n                    this.removeAtIndex(0);\n                    this.element.remove(this.element.selectedIndex);\n                }\n\n                // check if duplicates are allowed or not\n                if (item = this.emit('before.add', item)) {\n                    if (this.options.allowDuplicates || !this.has(item)) {\n                        const itemData = {\n                            value: this._objectItems ? item[this.options.itemValue] : item,\n                            text: this._objectItems ? item[this.options.itemText] : item\n                        };\n\n                        const tag = this._createTag(itemData);\n                \n                        // save item into the internal array\n                        this.items.push(item);\n\n                        if (!silently) { \n                            // Propagate change event to the original input\n                            this._propagateChange();\n\n                            this.emit('after.add', {\n                                item,\n                                tag\n                            });\n                        }\n                    } else {\n                        if (this.options.highlightDuplicate) {\n                            const duplicateTag = Array.from(this.container.children).filter(child => child.classList.contains('tag'))[this.indexOf(item)];\n\n                            if (duplicateTag) {\n                                duplicateTag.classList.add('is-duplicate');\n                                setTimeout(() => {\n                                    duplicateTag.classList.remove('is-duplicate');\n                                }, 1250);\n                            }\n                        }\n\n                        this.emit('item.duplicate', item);\n                    }\n                }\n            }\n        });\n\n        return this;\n    }\n\n    /**\n     * Unselect the selected item\n     */\n    clearSelection() {\n        if (this._selected >= 0) {\n            const item = this.items[this._selected];\n            const tag = Array.from(this.container.children).filter(child => child.classList.contains('tag'))[this._selected];\n\n            if (this.emit('before.unselect', {\n                item,\n                tag\n            })) {\n                if (tag) {\n                    tag.classList.remove('is-selected');\n                }\n\n                this._selected = -1;\n\n                this.emit('after.unselect', {\n                    item,\n                    tag\n                });\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Shortcut to removeAll method\n     */\n    flush() {\n        return this.removeAll();\n    }\n\n    /**\n     * Sets focus on the input\n     */\n    focus() {\n        this.container.classList.add('is-focused');\n        this.input.focus();\n\n        return this;\n    }\n\n    /**\n     * Check if given item is present\n     * @param {String} item \n     */\n    has(item) {\n        item = this._trim(item);\n\n        if (this._objectItems) {\n            return this.items.some(i => this.options.caseSensitive || !isString(i[this.options.itemValue]) ? i[this.options.itemValue] === item[this.options.itemValue] : i[this.options.itemValue].toLowerCase() === item[this.options.itemValue].toLowerCase());\n        } else {\n            return this.hasValue(item);\n        }\n    }\n\n    /**\n     * Check if given text is present\n     * @param {String} value \n     */\n    hasText(value) {\n        if (this.options.trim) {\n            value = value.trim();\n        }\n\n        return this.items.some(i => {\n            const val = (this._objectItems ? i[this.options.itemText] : i);\n\n            return this.options.caseSensitive ? val === value : val.toLowerCase() === value.toLowerCase();\n        });\n    }\n\n    /**\n     * Check if given value is present\n     * @param {String} value \n     */\n    hasValue(value) {\n        if (this.options.trim) {\n            value = value.trim();\n        }\n\n        return this.items.some(i => {\n            const val = (this._objectItems ? i[this.options.itemValue] : i);\n\n            return this.options.caseSensitive ? val === value : val.toLowerCase() === value.toLowerCase();\n        });\n    } \n\n    /**\n     * Get index of given item\n     * @param {string} item \n     */\n    indexOf(item) {\n        item = this._trim(item);\n\n        if (this._objectItems) {\n            if (!isObject(item)) {\n                throw('Item must be an object');\n            }\n\n            return this.items.map(function(e) { return e.value; }).indexOf(item.value);\n        } else {\n            return this.items.indexOf(item);\n        }\n    }\n\n    /**\n     * Returns the internal input element\n     */\n    input() {\n        return this.input;\n    }\n\n    /**\n     * Get items\n     */\n    items() {\n        return this.items;\n    }\n\n    /**\n     * Remove given item\n     * item = 'john'\n     * item = 'john,jane'\n     * @param String item \n     */\n    remove(items) {\n        if (this.options.removable) {\n            // Make sure to work with an array of items\n            items = Array.isArray(items) ? items : isObject(items) ? [items] : items.split(this.options.delimiter);\n\n            // If string items are expected then check every item is a string\n            if (!this._objectItems && (items.filter(item => isString(item)).length !== items.length)) {\n                throw('Item must be a string or an array of strings');\n            }\n            // If object items are expected then check every item is an object\n            if (this._objectItems && (items.filter(item => isObject(item)).length !== items.length)) {\n                throw('Item must be an object or an array of objects');\n            }\n\n            items.forEach(item => {\n                let index = this.indexOf(item);\n\n                while (index >= 0) {\n                    this.removeAtIndex(index);\n\n                    index = this.indexOf(item);\n                }\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Remove all tags at once\n     */\n    removeAll() {\n        if (this.options.removable) {\n            if (this.emit('before.flush', this.items)) {\n                this.clearSelection();\n\n                Array.from(this.container.children).filter(child => child.classList.contains('tag')).forEach(tag => tag.remove());\n\n                this.items = [];\n\n                this._filterDropdownItems();\n\n                this._propagateChange();\n\n                this.emit('after.flush', this.items);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Remove item at given index\n     * @param Integer index \n     */\n    removeAtIndex(index, clearSelection = true) {\n        if (this.options.removable && !isNaN(index) && index >= 0 && index < this.items.length) {\n            const tag = Array.from(this.container.children).filter(child => child.classList.contains('tag'))[index];\n            const item = this.items[index];\n\n            if (this.emit('before.remove', item)) {\n                if (clearSelection) {\n                    this.clearSelection();\n                }\n\n                if (tag) {\n                    tag.remove();\n                }\n\n                // If original input is a select element\n                // then deselect related option\n                if (this._isSelect) {\n                    this.element.options[index].selected = false;\n                }\n\n                if (this._selected == index) {\n                    this._selected = -1;\n                } else if (this._selected >= 0) {\n                    // One item less so selected index is \n                    this._selected -= 1;\n                }\n\n                this.items.splice(index, 1);\n\n                this._filterDropdownItems();\n\n                this._propagateChange();\n\n                this.emit('after.remove', item);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Select given item\n     * @param {string} item \n     */\n    select(items) {\n        if (this.options.selectable) {\n            // Make sure to work with an array of items\n            items = Array.isArray(items) ? items : isObject(items) ? [items] : items.split(this.options.delimiter);\n\n            // If string items are expected then check every item is a string\n            if (!this._objectItems && (items.filter(item => isString(item)).length !== items.length)) {\n                throw('Item must be a string or an array of strings');\n            }\n            // If object items are expected then check every item is an object\n            if (this._objectItems && (items.filter(item => isObject(item)).length !== items.length)) {\n                throw('Item must be an object or an array of objects');\n            }\n\n            items.forEach(item => {\n                this.selectAtIndex(this.indexOf(item));\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Select tag at given index\n     * @param Integer index \n     */\n    selectAtIndex(index) {\n        if (this.options.selectable) {\n            // Clear selection\n            this.clearSelection();\n\n            if (!isNaN(index) && index >= 0 && index < this.items.length) {\n                const tag = Array.from(this.container.children).filter(child => child.classList.contains('tag'))[index];\n                const item = this.items[index];\n\n                if (this.emit('before.select', {\n                    item,\n                    tag\n                })) {\n                    if (tag) {\n                        tag.classList.add('is-selected');\n                    }\n\n                    this._selected = index;\n\n                    this.emit('after.select', {\n                        item,\n                        tag\n                    });\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Get selected item\n     */\n    get selected() {\n        if (this._selected >= 0) {\n            return this.items[this._selected];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Get selected item index\n     */\n    get selectedIndex() {\n        return this._selected;\n    }\n\n    /**\n     * Get value\n     */\n    get value() {\n        if (!this._isSelect) {\n            if (this._objectItems) {\n                return this.items.map(item => item.value).join(this.options.delimiter);\n            } else {\n                return this.items.join(this.options.delimiter);\n            }\n        } else {\n            return Array.from(this.element.options).filter(option => option.selected).map(option => option.value);\n        }\n    }\n\n    /**\n     * Set value\n     */\n    set value(string) {\n        this.removeAll();\n        this.add(string);\n    }\n\n    /**\n     * Document click event handler\n     * @param {Event} e \n     */\n    _onDocumentClick(e) {\n        if (this.dropdown) {\n            // If we click on element inside container then do nothing\n            if (this.container.contains(e.target)) {\n                return;\n            }\n\n            // Tag and delete button already deleted when event triggered\n            // So we check if target is a tag delete button\n            if (e.target.dataset.tag && e.target.dataset.tag === 'delete') {\n                return;\n            }\n\n            // Click outside dropdown so close it\n            this._closeDropdown();\n        }\n    }\n\n    /**\n     * Input focus lost event handler\n     * @param {Event} e \n     */\n    _onDropdownItemClick(e) {\n        e.preventDefault();\n        \n        if (this.dropdown) {\n            if (this._objectItems) {\n                let item = {};\n                item[this.options.itemText] = e.currentTarget.dataset.text;\n                item[this.options.itemValue] = e.currentTarget.dataset.value;\n\n                this.add(item);\n            } else {\n                this.add(e.currentTarget.dataset.value);\n            }\n\n            this._filterDropdownItems();\n            this.input.value = '';\n            this.input.focus();\n\n            if (this.options.closeDropdownOnItemSelect) {\n                this._closeDropdown();\n            }\n        }\n    }\n\n    /**\n     * Input change event handler\n     * @param {Event} e \n     */\n    _onInputChange(e) {\n        this._filterDropdownItems(this.input.value);\n    }\n\n    /**\n     * Input click event handler\n     * @param {Event} e \n     */\n    _onInputClick(e) {\n        e.preventDefault();\n\n        if (!this.source || this.input.value.length >= this.options.searchMinChars) {\n            this._openDropdown();\n            this._filterDropdownItems();\n        }\n    }\n\n    /**\n     * Input focus event handler\n     * \n     * @param {Event} e \n     */\n    _onInputFocusIn(e) {\n        e.preventDefault();\n        \n        if (this.container.getAttribute('disabled') !== null || this.container.classList.contains('is-disabled')) {\n            this.input.blur();\n            \n            return false;\n        }\n\n        this.container.classList.add('is-focused');\n    }\n\n    /**\n     * Input focus lost event handler\n     * @param {Event} e \n     */\n    _onInputFocusOut(e) {\n        e.preventDefault();\n\n        this.container.classList.remove('is-focused');\n    }\n    \n    /**\n     * Input Keydown event handler\n     * \n     * @param {Event} e \n     */\n    _onInputKeyDown(e) {\n        const key = e.charCode || e.keyCode || e.which;\n\n        switch (key) {\n            // BACKSPACE\n            case 8:\n                if (this.options.removable) {\n                    if (this._caretAtStart() && this._selected >= 0) {\n                        const currentItemIndex = this._selected;\n                        // If tag was selected then select next (or previous if next does not exists)\n                        if (currentItemIndex >= 0) {\n                            this.selectAtIndex(currentItemIndex + 1 < this.items.length ? currentItemIndex + 1 : currentItemIndex - 1);\n                        }\n\n                        this.removeAtIndex(currentItemIndex, false);\n                    }\n                }\n                \n                if (this.source && (this.input.value.length) < this.options.searchMinChars) {\n                    this._closeDropdown();\n                }\n                break;\n            // ESCAPE\n            case 27:\n                if (this._selected >= 0) {\n                    this.clearSelection();\n                }\n\n                this._closeDropdown();\n                break;\n            // DELETE\n            case 46:\n                if (this.options.removable) {\n                    if (this._caretAtStart() && this._selected >= 0) {\n                        const currentItemIndex = this._selected;\n\n                        // If tag was selected then select next (or previous if next does not exists)\n                        if (currentItemIndex >= 0) {\n                            this.selectAtIndex(currentItemIndex + 1 < this.items.length ? currentItemIndex + 1 : currentItemIndex - 1);\n                        }\n                        \n                        this.removeAtIndex(currentItemIndex, false);\n                    }\n                }\n\n                if (this.source && (this.input.value.length) < this.options.searchMinChars) {\n                    this._closeDropdown();\n                }\n                break;\n            // LEFT ARROW\n            case 37:\n                if (!this.input.value.length) {\n                    if (this._selected < 0) {\n                        this.selectAtIndex(this.items.length - 1);\n                    } else {\n                        this.selectAtIndex(this._selected - 1 >= 0 ? this._selected - 1 : this.items.length - 1);\n                    }\n                }\n                break;\n            // RIGHT ARROW\n            case 39:\n                if (!this.input.value.length) {\n                    if (this._selected < 0) {\n                        this.selectAtIndex(0);\n                    } else {\n                        this.selectAtIndex(this._selected + 1 >= this.items.length ? 0 : this._selected + 1);\n                    }\n                }\n                break;\n            default:\n                if (this.options.clearSelectionOnTyping) {\n                    this.clearSelection();\n                }\n                // ignore\n        }\n    }\n    \n    /**\n     * Input Keypress event handler\n     * \n     * @param {Event} e \n     */\n    _onInputKeyPress(e) {\n        const key = e.charCode || e.keyCode || e.which;\n        let value = this._trim(this.input.value) + String.fromCharCode(key);\n\n        if (!this._manualInputAllowed && !this._filterInputAllowed) {\n            e.preventDefault();\n\n            return false;\n        }\n\n        // ENTER\n        if (!value.length && key !== 13) {\n            return false;\n        }\n\n        if (this._filterInputAllowed) {\n            this._filterDropdownItems(value);\n        }\n\n        if (this._filterInputAllowed && this.source && value.length >= this.options.searchMinChars && key !== 13) {\n            this._openDropdown();\n            this.dropdown.classList.add('is-loading');\n            this._emptyDropdown();\n\n            this.source(value).then(results => {\n                results = this.emit('on.results.received', results);\n        \n                if (results.length) {\n                    results.forEach(result => {\n                        let item = {\n                            value: null,\n                            text: null\n                        };\n\n                        if (!isObject(result)) {\n                            item.value = result;\n                            item.text = result;\n                        } else {\n                            item.value = result[this.options.itemValue];\n                            item.text = result[this.options.itemText];\n                        }\n\n                        this._createDropdownItem(item);\n                    });\n                }\n\n                this._filterDropdownItems(value);\n\n                this.dropdown.classList.remove('is-loading');\n            }).catch(error => {\n                console.log(error);\n            });\n        }\n\n        if (this._manualInputAllowed && (value.includes(this.options.delimiter) || key == 13)) {\n            // Prevent default behavior (ie: add char into input value)\n            e.preventDefault();\n\n            // Split value by delimiter in case we copy/paste multiple values\n            const values = value.split(this.options.delimiter);\n            values.forEach(value => {\n                // check if empty text when delimiter is removed\n                if ((value = value.replace(this.options.delimiter, '')) != '') {\n                    // push to array and remove delimiter\n                    this.add(value);\n                }\n            });\n\n            value = '';\n            // clear input\n            this.input.value = '';\n\n            this._closeDropdown();\n\n            return false;\n        }\n    }\n\n    /**\n     * Original input change event handler\n     * CAUTION: because original input is now hidden the change event must be triggered manually on change\n     * Example how to trigger change event manually\n     * var changeEvent = new Event('change');\n     * input.dispatchEvent(changeEvent);\n     * \n     * @param {Event} e \n     */\n    _onOriginalInputChange(e) {\n        if (!e.detail || isString(e.detail) && e.detail !== this.constructor.name) {\n            this.value = e.currentTarget.value;\n        }\n    }\n    \n    /**\n     * Tag click event handler\n     * \n     * @param {Event} e \n     */\n    _onTagClick(e) {\n        e.preventDefault();\n        \n        if (e.currentTarget.classList.contains('delete')) {\n            return false;\n        }\n\n        if (this.container.getAttribute('disabled') !== null || this.container.classList.contains('is-disabled')) {\n            return false;\n        }\n\n        this.input.focus();\n\n        if (this.options.selectable) {\n            const tag = e.currentTarget.closest('.tag');\n\n            if (tag) {\n                const tagIndex = Array.from(this.container.children).indexOf(tag);\n                if (tagIndex === this._selected) {\n                    this.clearSelection();\n                } else {\n                    this.selectAtIndex(tagIndex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Delete tag button click event handler\n     * \n     * @param {Event} e \n     */\n    _onTagDeleteClick(e) {\n\t\te.preventDefault();\n\n        if (this.container.getAttribute('disabled') !== null || this.container.classList.contains('is-disabled')) {\n            return false;\n        }\n        \n        const tag = e.currentTarget.closest('.tag');\n\n        if (tag) {\n            this.removeAtIndex(Array.from(this.container.children).indexOf(tag));\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}